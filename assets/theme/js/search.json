[
{
    "content": "\r\n<div class=\"frctl-example\">\r\n    <div class=\"changelog\">\r\n        <p>See a <a href=\"https://github.com/youseedk/dna/releases\">complete list of releases</a> on GitHub.</p>\r\n    </div>\r\n</div>\r\n",
    "data": {
        "title": "Changelog",
        "url": "/docs/changelog",
        "category": "page",
        "primaryKeywords": "page change release npm version",
        "secondaryKeywords": "latest contributor update github"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\nYouSee DNA is created by us for us. Our Design system should reflect 80% of our needs, which means that if the design and code is not relevant for 80% of all squads it shouldn’t be added to YouSee DNA, but stay and be governed within the squads.\n\nIn parallel to this site we have sat up a YouSee DNA slack channel where everybody can suggest new elements and ask quiestions.\nPlease feel free to join #yousee-dna (it requires membership of the tdcgroup workspace).\n\n## Reviewers\nFor maintenance reasons we have set a team of reviewers. Please get in touch with them or send them your pull request if you want to contribute.\n\n-\tMichael Grandorf (Code)\n-   Magnus Havgry (Code)\n-\tDaniel dos Santos (Design)\n-\tNicolai Fogh (UX)\n",
    "data": {
        "title": "Governance",
        "url": "/docs/governance",
        "category": "page",
        "primaryKeywords": "contributor reviewer",
        "secondaryKeywords": "maintenance contact support"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\n## How to contribute\nIf you have suggestions for this site or you want file a bug please see [how to contribute](/docs/contributors).\n\n## Contact persons\nIf you need to get in touch with us please come and find us in the Digital Warehouse.\n-\tMichael Grandorf (Tech Lead)\n-   Magnus Havgry (Front-end Developer)\n-\tDaniel Simon Dos Santos (Lead Digital Designer)\n-\tNicolai Fogh (UX Lead)\n\n## License\nSee [LICENSE.md](https://raw.githubusercontent.com/youseedk/dna/master/LICENSE.md) for more information on our MIT license.\n",
    "data": {
        "title": "Support",
        "url": "/docs/support",
        "category": "page",
        "primaryKeywords": "kontakt contact mail email",
        "secondaryKeywords": "github npm"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\n<!-- ******************************************************************************** -->\n<!-- *****          This file is automatically generated by a gulp task         ***** -->\n<!-- ***** If you need to change its content please do it in ./CONTRIBUTING.md' ***** -->\n<!-- ******************************************************************************** -->\n\r\n\r\n## Reporting issues\r\nShould you run into any issues with the documentation site, or npm package, please don't hesitate to let us know by filling an [issue](https://github.com/youseedk/dna/issues/new).\r\nIt is important that the issue is well described and a screenshot is added. Also, if you are filling in a bug please remember to add your browser version and steps in how to reproduce the issue.\r\nPlease don't assign anybody to the task. The contributors will automatically get a notification when your issue is created and will assign themselve when they have time to work on the issue.\r\n\r\n## Branching strategy\r\nWe use [Gitflow](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow). This means instead of a single master branch, this workflow uses two branches to record the history of the project. The `master` branch stores the official releases, and the `develop` branch serves as an integration branch for features.\r\nThis means features and bugs branches should be created off and to the `develop` branch.\r\n\r\n## Pull Requests\r\nPlease fork our [repository](https://github.com/youseedk/dna/) and create a pull request with your changes.\r\n\r\nGenerally we like to see pull requests that:\r\n- Maintain the existing code style\r\n- Are focused on a single change (i.e. avoid large refactoring or style adjustments in untouched code if not the primary goal of the pull request)\r\n- Have good commit messages that describe what you do (and not what you have done). Also, you can add `- fixes #xxx` in the end of your PR. This will automatically close your issue #xxx (e.g. #192) under issues when your code is released. \r\n\r\n## Instructions to spin up the site in your browser\r\nPlease run:\r\n- `npm ci`\r\n- `npm i -g gulp` (only if you don't already have gulp installed)\r\n- `gulp`\r\n\r\n## Running tests\r\nWe don't have automatic tests except Travis CI testing the build. However, if you add a new component to the site or make severe changes to an exsiting one we require that you test it in all our [supported browsers](/docs/code-guidelines/browser-support). \r\n\r\n## Updating the NPM package and version number\r\nThis will be handled by somebody else when merging/deploying code to master/producton.\r\nWe use `semver` for versioning. Basically, we have to decide if the code changes in the develop branch is a patch, minor or major update.\r\n\r\n## Releasing the latest version\r\nThis will be handled by somebody else when merging/deploying code to master/producton.\r\n\r\n## Current contributors\r\n<div class=\"contributors\">\r\n    <p>See a <a href=\"https://github.com/youseedk/dna/graphs/contributors\">complete list of contributors</a> on GitHub.</p>\r\n</div>\r\n",
    "data": {
        "title": "How to Contribute",
        "url": "/docs/contributors",
        "category": "page",
        "primaryKeywords": "issue bug contributions feature github npm pull request",
        "secondaryKeywords": "gitflow test gulp fork repository"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "<div class=\"frctl-example\">\n    <label class=\"search__label\" for=\"searchPageInput\">Search on dna.yousee.dk</label>\n    <input name=\"q\" id=\"searchPageInput\" type=\"search\" value=\"\" class=\"search__input search__input--results\" placeholder=\"\" pattern=\"^[a-zA-Z][a-zA-Z0-9-_\\.\\s]{1,65}\" autocomplete=\"off\" list=\"searchSuggestions\">\n    <section id=\"searchResults\"></section>\n </div>\n",
    "data": {},
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\n<p class=\"prose-build\">Last deployment: <time class=\"prose-build-time\"></time></p>\r\n\r\n## YouSee DNA is our design system.\r\nA comprehensive guide and resource library that contains everything you’ll need to design with us, including our core principles, visual design, interface components, branding, and resources to help make your work faster and our pages more consistent.\r\n\r\n## Why DNA\r\nDNA represents, for a human being, all your genetic code, therefore, the color of your eyes, the pattern of your hair and all your physichal charactericts. YouSee DNA does the same but for our website.\r\n\r\n## Getting Started\r\nThe YouSee DNA provides tools and guidelines to create exceptional experiences consistent with our brand and product guidelines. Read on to learn how to best use our design system for your role.\r\n\r\n### Designers\r\nWe aim to help designers make decisions on what type of components and patterns to use and when.\r\n\r\nWe also provide design resources to aid with creating beautiful, consistent experiences.\r\n\r\nDesigners should have access to our Design System File on Sketch hosted on Abstract where you can embed Sketch Libraries to your files and get all of these elements as symbols.\r\n\r\nFor access please contact [Daniel Simon Dos Santos](mailto:dsdo@yousee.dk?subject=DNA).\r\n\r\n### Developers\r\nWe provide the building blocks to assemble consistent user interfaces.\r\n\r\nDevelopers can take advantage of the \"Components\" section to see how certain designs are achieved.\r\n\r\nTo start developing, please see [Installation and Usage](/docs/code-guidelines/installation-and-usage).\r\n",
    "data": {
        "title": "Welcome to YouSee DNA",
        "url": "/",
        "category": "page",
        "primaryKeywords": "homepage home frontpage",
        "secondaryKeywords": "start index"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\n## Install\r\n- Install with [npm](https://www.npmjs.com/): `npm i @youseedk/dna`\r\n- Install with [yarn](https://yarnpkg.com/): `yarn add @youseedk/dna`\r\n\r\n## Usage\r\nThe package is designed for two use cases:\r\n\r\n1. \"As is\" — you use ys-bundle.min.css which contains all YouSee elements and layout settings. That file is available both in the NPM package and on the CDN.\r\n2. \"Custom\" - you only import the necessary files in your setup. Please note that you need to import ys-base.css, before including any other files from DNA.\r\n\r\n### Requirements\r\n- Due to accessibility reasons, all font sizing is set using the `rem` unit — however, this requires that the font size on the `html` element is set to `16px` (default in all modern browsers).\r\n\r\n### CDN\r\nIt is also possible to load the bundled css files from a CDN:\r\n```html\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://unpkg.com/@youseedk/dna/ys-bundle.min.css\" />\r\n```\r\nwill always load the latest version.\r\n\r\nIf a specific version is needed, insert the version number into the URL, ie.:\r\n```html\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://unpkg.com/@youseedk/dna@1.0.0/ys-bundle.min.css\" />\r\n```\r\nwill load version 1.0.0.\r\n\r\n## Contents of package\r\nThe package is organized in the following structure:\r\n```plaintext\r\ndna/\r\n├── css/\r\n│   ├── base\r\n│   ├── elements\r\n│   ├── icons\r\n│   ├── layout\r\n│   ├── settings\r\n├── scss/\r\n├── svg/\r\n├── ys-bundle.css\r\n└── ys-bundle.min.css\r\n```\r\n\r\nThe bundle files  (`ys-bundle.css` or `ys-bundle.min.css`) is the only file you need to import if you want to add all elements from YouSee DNA. This is the quick and easy option, but it might not be preferable in some use cases. In those use cases the subfolders contain what's needed for building a custom stylesheet that only contains the needed elements.\r\n\r\n### css\r\nThe `css` folder contains minified css-files that can be imported into any build step.\r\n\r\n`css/base` contains the bare minimums, and the `ys-base.css` file is required for all use cases.\r\n\r\n`css/elements` containes ui elements, such as buttons, input fields, typography, cards etc.\r\n\r\n`css/icons` is needed if you choose to use the icon sprite or any of the SVG's included.\r\n\r\n`css/layout` is the grid.\r\n\r\n`css/settings` includes CSS Custom Properties (also known as CSS variables) for colors, breakpoints etc.\r\n\r\n### scss\r\nThe `scss` folder contains scss-variables for colors, breakpoints etc.\r\n\r\n### svg\r\n`svg` contains all icons, both those used in the UI and the YouSee icon set, as seperate files and as two SVG sprites.\r\n\r\n\r\n\r\n",
    "data": {
        "title": "Installation & Usage",
        "url": "/docs/code-guidelines/installation-and-usage",
        "category": "code-guidelines",
        "primaryKeywords": "code npm install gulp css framework cdn",
        "secondaryKeywords": "github"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\n-  [HTML5 standards](#html5-standards)\r\n-  [Semantic HTML](#semanticHTML)\r\n-  [Indentation](#indentation)\r\n-  [Encoding](#encoding)\r\n-  [Lower case elements and attributes](#lower-case-elements-and-attributes)\r\n-  [Quote attribute values](#quote-attribute-values)\r\n-  [Image attributes](#image-attributes)\r\n-  [Boolean attributes](#boolean-attributes)\r\n-  [Break spaces](#break-spaces)\r\n-  [Break element](#break-element)\r\n\r\n## HTML5 standards\r\n\r\nAlways write HTML that follows the standards defined by the W3C and the WHATWG. To test if your code follows these standards, there are multiple tools available, among them [The W3C validation service](https://validator.w3.org/), where you can copy/paste HTML code. Another option is a browser extension such as [The Web Developer Toolbar](https://chrispederick.com/work/web-developer/), that allows you to validate HTML that is on a local machine/server.\r\n\r\n## Semantic HTML\r\n\r\nSemantic HTML or semantic markup is HTML that introduces meaning to the web page rather than just presentation. For example, a `<p>` tag indicates that the enclosed text is a paragraph where a `<div>` or a `<span>` element indicates nothing.\r\n\r\nSemantic HTML provides:\r\n\r\n-  More information to search engines (SEO)\r\n-  More accessible content (Accessibility)\r\n-  Help for screenreader users to understand the contents structure and gives it meaning (Accessibility)\r\n-  Meaning to the browser but also for other developers (readability)\r\n\r\n## Indentation\r\n\r\nIndent by 4 spaces at all time. Don’t use tabs or mix tabs and spaces for indentation. Plese note that this rule does not apply for HTML used inside .js or .jsx files. Here you should follow the JS linting rules.\r\n\r\n**Bad example**\r\n\r\n      <section>\r\n        <p>This is a paragraph.</p>\r\n      </section>\r\n\r\n**Good example**\r\n\r\n      <section>\r\n          <p>This is a paragraph.</p>\r\n      </section>\r\n\r\n## Encoding\r\n\r\nMake sure your editor uses UTF-8 as character encoding. Specify the encoding in HTML templates and documents like this.\r\n\r\n      <meta charset=\"utf-8\" />\r\n\r\n## Lower case elements and attributes\r\n\r\nAlways use lowercase for elements and attributes. It looks cleaner and improves readability.\r\n\r\n**Bad example**\r\n\r\n      <SECTION>\r\n          <p ID=\"test\">This is a paragraph.</p>\r\n      </SECTION>\r\n\r\n**Good example**\r\n\r\n      <section>\r\n          <p id=\"test\">This is a paragraph.</p>\r\n      </section>\r\n\r\n## Quote attribute values\r\n\r\nHTML attributes must always use double quotes (\").\r\nPlese note that this rule does not apply for HTML used inside .js or .jsx files. Here you should follow the JS linting rules.\r\n\r\n**Bad example**\r\n\r\n      <table class=classname>\r\n      <table class='classname'>\r\n\r\n**Good example**\r\n\r\n      <table class=\"classname\">\r\n\r\n## Image attributes\r\n\r\nAlways use the alt attribute with images. It is important for accessibility issues.\r\nInformative elements should aim for short, descriptive alternate text. Decorative elements can be ignored with an empty alt attribute.\r\n\r\n**Bad example**\r\n\r\n      <img src=\"sc.png\" /> <!-- Screenreaders will read the scr attribute if no alternative text is added. Never do this -->\r\n\r\n**Good examples**\r\n\r\n      <img src=\"sc.png\" alt=\"\" /> <!-- Screenreaders will skip/ignore this image. Useful if the image is only decorative -->\r\n      <img src=\"sc.png\" alt=\"Sitecore\" /> <!-- Screenreaders will read the alternative text \"Sitecore\" -->\r\n\r\n## Boolean attributes\r\n\r\nPlease use attribute minimization when you can.\r\n\r\n**Bad example**\r\n\r\n    <input type=\"checkbox\" name=\"\" value=\"\" disabled=\"disabled\" />\r\n    <input type=\"checkbox\" name=\"\" value=\"\" checked=\"checked\" />\r\n\r\n**Good example**\r\n\r\n    <input type=\"checkbox\" name=\"\" value=\"\" disabled />\r\n    <input type=\"checkbox\" name=\"\" value=\"\" checked />\r\n\r\n## Break spaces\r\n\r\nUsage of non-breaking spaces \"&nbsp;\" and similar special characters like &#160; is being misused way to often. Non-breaking spaces are just what they sound like - spaces where a line break will not occur.\r\nYou should **not** use them to add space between words, sentences, or elements. Especially not elements.\r\nUse CSS to add padding or margin instead.\r\n\r\n## Break element\r\n\r\nUsage of the `<br>` element should be avoided. This element/tag is something WYSIWYG editors inserts to do a linebreak in parapgraphs.\r\nUse CSS to add padding or margin instead.\r\n\r\n\r\n",
    "data": {
        "title": "HTML Guidelines",
        "url": "/docs/code-guidelines/html-guidelines",
        "category": "code-guidelines",
        "primaryKeywords": "code accessibility semantic html5 encoding a11y",
        "secondaryKeywords": "break spaces attributes"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\nThe CSS codebase is a Sass solution (we use the SCSS syntax) with BEM as naming convention. For a quick intro to BEM, please read this excellent article by Harry Roberts: [MindBEMding – getting your head ’round BEM syntax](https://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/).\r\n\r\nWe use stylelint to test for possible errors and formatting issues. You can install tools like stylelint for Visual Studio Code to give you instant feedback on your code. You may also run the gulp task \"stylelint\" to test your scss code for errors.\r\n\r\nWe encourage you to follow these guidelines. If you fail to do so your code will probably;\r\n\r\n-  make the code base less consistent\r\n-  add unnecessary time to your pull request reviewers (because of comments)\r\n-  break the build\r\n\r\nThere are exceptions where we want to commit code that \"break\" the rules — this is possible but requires that comments are inserted into the code. For example `/* stylelint-disable-line name-of-rule */`.\r\n\r\n-  [The cursor property](#the-cursor-property)\r\n-  [The focus property](#the-focus-property)\r\n-  [YS class names](#ys-class-names)\r\n-  [Comments](#comments)\r\n-  [Capitalization](#capitalization)\r\n-  [Class names and ID's](#class-names-and-id-s)\r\n-  [Naming selectors](#naming-selectors)\r\n-  [Nesting classes and selectors](#nesting-classes-and-selectors)\r\n-  [Formatting rules](#formatting-rules)\r\n  -  [Indentation](#indentation)\r\n  -  [Quotes](#quotes)\r\n  -  [Trailing whitespace](#trailing-whitespace)\r\n  -  [Declaration stop](#declaration-stop)\r\n  -  [Property name stops](#property-name-stops)\r\n  -  [Declaration block separation](#declaration-block-separation)\r\n  -  [Selector and declaration separation](#selector-and-declaration-separation)\r\n  -  [Rule separation](#rule-separation)\r\n-  [Shorthand properties](#shorthand-properties)\r\n-  [Qualified selectors](#qualified-selectors)\r\n-  [Media queries](#media-queries)\r\n  -  [Nesting rules](#nesting-rules)\r\n  -  [Mobile First approach](#mobile-first-approach)\r\n  -  [Responsive breakpoints](#responsive-breakpoints)\r\n-  [Vendor-specific prefixes](#vendor-specific-prefixes)\r\n-  [!important](#-important)\r\n-  [Pseudo elements](#pseudo-elements)\r\n-  [Units](#units)\r\n-  [Sass's ampersand](#sass-s-ampersand)\r\n\r\n\r\n## The cursor property\r\nDon't mess with `cursor`-property unless you've invented a completely new (and un-native) interactive element.\r\n\r\n## The focus property\r\nNever remove the `:focus` style completely. If you remove the default `outline`, please replace it with something that is either as noticeable or more noticeable.\r\n\r\n## YS class names\r\n- All classes distributed in the YouSee DNA are prefixed with `ys-`. This is to avoid naming conflicts and inheritance issues.\r\n- `ys-`-classes may _never_ be overwritten or modified.\r\n\r\nAll `ys-` selectors are also preceded by `html:not(#ys-specificity)` which is added to heighten specificity on the selector. This is done to avoid other CSS from \"bleeding\" into the DNA components — ie. some projects who include DNA might not be using strict BEM (or similar), and if they have styling on elements there is no way to prevent those styles from being inherited by DNA components, so we have to do our best to have a higher specificity than those rules.\r\n\r\n## Comments\r\n\r\nExplain code as needed, where possible. (They will be removed in production anyway).\r\n```html\r\n//Use this for short comments\r\n\r\n/* Use this for long comments that needs more explanation.\r\n    What does it cover, what purpose does it serve, why is\r\n    respective solution used or preferred */\r\n```\r\n## Capitalization\r\n\r\nUse lowercase for everything. This applies to CSS selectors, properties, variables and property values etc. You can use a hyphen instead of camelCasing.\r\n\r\n**Bad example**\r\n\r\n    .Example {\r\n      //\r\n    }\r\n    .contentBox {\r\n      //\r\n    }\r\n\r\n**Good example**\r\n\r\n    .example {\r\n      //\r\n    }\r\n\r\n    .content-box {\r\n      //\r\n    }\r\n\r\n## Class names and ID's\r\n\r\nClass names should always follow BEM.\r\n\r\n-  Never use ID as selectors, they are way too specific. Make heavy use of classes because they are the ideal selector\r\n\r\n-  Blocks have NO prefixes\r\n\r\n-  Elements are always prefixed with two underscores\r\n\r\n-  modifiers are prefixed with tow hyphens\r\n\r\n-  long names are separated by one hyphen\r\n\r\n-  avoid underscores in class names besides for elements\r\n\r\n\r\n**Bad examples**\r\n\r\n    #some-class\r\n    .class_name\r\n    .longnotwellnamedclassname\r\n    .block__withsomeelememt\r\n\r\n**Good examples**\r\n\r\n    .classname\r\n    .class-name\r\n    .long-wellnamed-classname\r\n    .block__with-some-elememt\r\n    .block__with-some-elememt--modifier\r\n\r\n## Naming selectors\r\n\r\nNaming selectors should always be sematic. Don’t name it based on its looks. That will quickly get redundant.\r\n\r\n**Bad examples**\r\n\r\n    .blue-button-with-space\r\n    .blue-button-with-space--withyellowborder\r\n\r\n**Good examples**\r\n\r\n    .button--primary\r\n    .button--primary--highlighted\r\n\r\n## Nesting classes and selectors\r\n\r\nDon't nest selectors if it’s not necessary. As a good practice maximum nest up to three layers.\r\nAlso, before every nested class or selector there should be a linebreak for readability reasons.\r\n\r\n**Not allowed**\r\n\r\n    .feedback {\r\n      //\r\n\r\n      .feedback__header {\r\n        //\r\n\r\n        .feedback__subheader {\r\n          //\r\n\r\n          .feedback__subheader--special {\r\n            //\r\n          }\r\n        }\r\n      }\r\n\r\n      &__content {\r\n\r\n        &--modifier {\r\n          //\r\n        }\r\n      }\r\n    }\r\n\r\n**Good example**\r\n\r\n    .feedback {\r\n      //\r\n\r\n      &__header {\r\n        //\r\n      }\r\n\r\n      &__subheader {\r\n        //\r\n\r\n        &--special {\r\n          //\r\n        }\r\n      }\r\n\r\n      &__content {\r\n        //\r\n\r\n        &--modifier {\r\n          //\r\n        }\r\n      }\r\n    }\r\n\r\n## Formatting rules\r\n\r\n### Indentation\r\n\r\nIndent by 2 spaces at all time. Don’t use tabs or mix tabs and spaces for indentation.\r\n\r\n**Bad example**\r\n\r\n    .example {\r\n        color: $color-white;\r\n    }\r\n\r\n**Good example**\r\n\r\n    .example {\r\n      color: $color-white;\r\n    }\r\n\r\n### Quotes\r\n\r\nAlways use single quotes\r\n\r\n**Bad example**\r\n\r\n    content: \"Hello\";\r\n    background: url(\"/img/image.jpg\");\r\n\r\n**Good example**\r\n\r\n    content: 'Hello';\r\n    background: url('/img/image.jpg');\r\n\r\n### Trailing Whitespace\r\n\r\nRemove trailing white spaces. Trailing white spaces are unnecessary and can complicate diffs.\r\n\r\n**Bad example**\r\n\r\n    .example {\r\n      font-size: rem(16);_\r\n    }__\r\n\r\n**Good example**\r\n\r\n    .example {\r\n      font-size: rem(16);\r\n    }\r\n\r\n### Declaration Stop\r\n\r\nEnd every declaration with a semicolon for consistency and extensibility reasons.\r\n\r\n**Bad example**\r\n\r\n    .class {\r\n      display: block\r\n    }\r\n\r\n**Good example**\r\n\r\n    .class {\r\n      display: block;\r\n    }\r\n\r\n### Property Name Stops\r\n\r\nUse a space after a property name’s colon. Always use a single space between property and value (but no space between property and colon) for consistency reasons.\r\n\r\n**Bad example**\r\n\r\n    .class {\r\n      font-weight:bold;\r\n    }\r\n\r\n**Good example**\r\n\r\n    .class {\r\n      font-weight: bold;\r\n    }\r\n\r\n\r\n### Declaration Block Separation\r\n\r\nUse a space between the last selector and the declaration block.\r\nAlways use a single space between the last selector and the opening brace that begins the declaration block.\r\n\r\nThe opening brace should be on the same line as the last selector in a given rule and the closing brace should be immediately after the last rule.\r\n\r\n**Bad example**\r\n\r\n    /* Not recommended: missing space and there is a unnecessary line break */\r\n    .class{\r\n      margin-top: rem(16);\r\n\r\n    }\r\n\r\n    /* Not recommended: unnecessary line break */\r\n    .class\r\n    {\r\n      margin-top: rem(16);\r\n    }\r\n\r\n**Good example**\r\n\r\n        .class {\r\n        margin-top: rem(16);\r\n        }\r\n\r\n### Selector and Declaration Separation\r\n\r\nSeparate selectors and declarations by new lines.\r\nAlways start a new line for each selector and declaration.\r\n\r\n**Bad example**\r\n\r\n    &:hover, &:active, &:focus {\r\n      background: $color-white;\r\n      color: $color-white;\r\n    }\r\n\r\n**Good example**\r\n\r\n    &:hover,\r\n    &:active,\r\n    &:focus {\r\n      background: $color-white;\r\n      color: $color-white;\r\n    }\r\n\r\n### Rule Separation\r\n\r\nSeparate rules by new lines.\r\nAlways put a blank line (two line breaks) between rules. Also if the class is nested\r\n\r\n**Bad example**\r\n\r\n    .class {\r\n      margin: rem(16);\r\n      min-width: rem(80);\r\n    }\r\n    .another-class {\r\n      margin: rem(16);\r\n      min-width: rem(80);\r\n      .nested-class {\r\n        margin: rem(16);\r\n        min-width: rem(80);\r\n      }\r\n    }\r\n\r\n**Good example**\r\n\r\n\r\n    .class {\r\n      margin: rem(16);\r\n      min-width: rem(80);\r\n    }\r\n\r\n    .another-class {\r\n      margin: rem(16);\r\n      min-width: rem(80);\r\n\r\n      .nested-class {\r\n        margin: rem(16);\r\n        min-width: rem(80);\r\n      }\r\n    }\r\n\r\n## Shorthand Properties\r\n\r\nUse shorthand properties where possible. CSS offers a variety of shorthand properties (like font) that should be used whenever possible. Using shorthand properties is useful for code efficiency and understand-ability.\r\n\r\n**Bad example**\r\n\r\n    border-top-style: none;\r\n    font-family: palatino, georgia, serif;\r\n    font-size: rem(16);\r\n    font-weight: bold;\r\n    line-height: 1.6;\r\n    padding-bottom: rem(32);\r\n    padding-left: rem(16);\r\n    padding-right: rem(16);\r\n    padding-top: 0;\r\n\r\n**Good example**\r\n\r\n    border-top: 0;\r\n    font: bold rem(16)/1.6 palatino, georgia, serif;\r\n    padding: 0 rem(16) rem(32);\r\n\r\n## Qualified selectors\r\n\r\nDon’t use qualified selectors with type selectors.\r\n\r\n**Bad example**\r\n\r\n    a.classname\r\n    ul.someclass\r\n    body div ul li.myclass\r\n\r\n**Good example**\r\n\r\n    .classname\r\n    .someclass\r\n    .myclass\r\n\r\n## Media queries\r\n\r\n### Nesting rules\r\n\r\nPlease nest all media queries directly in to the class it affects. Make sure there is an empty line above the media-query to improve readability.\r\n\r\n**Bad example**\r\n\r\n    .classname {\r\n      margin: rem(16);\r\n      min-width: rem(80);\r\n    }\r\n\r\n    @media (min-width: 768px)\r\n\r\n      .classname {\r\n        min-width: rem(128);\r\n      }\r\n    }\r\n\r\n**Good example**\r\n\r\n    .classname {\r\n      margin: rem(16);\r\n      min-width: rem(80);\r\n\r\n      @media (min-width: 768px) {\r\n        min-width: rem(128);\r\n      }\r\n    }\r\n\r\n### Mobile First approach\r\n\r\nAlways declare your CSS rules for smallest screen possible. Then use breakpoints to change layout for bigger screens.\r\n\r\n**Bad example**\r\n\r\n    .classname {\r\n      display: flex;\r\n\r\n      @media (max-width: 768px) {\r\n        display: block;\r\n      }\r\n    }\r\n\r\n**Good example**\r\n\r\n\r\n    .classname {\r\n      display: block;\r\n\r\n      @media (min-width: 768px) {\r\n        display: flex;\r\n      }\r\n    }\r\n\r\n### Responsive breakpoints\r\n\r\nYouSee DNA and Bootstrap use the same media queries. This is because the grid in YouSee DNA is build on top of Bootstrap.\r\n\r\n**Breakpoints**\r\n\r\n    xs = Extra small <576px (default)\r\n    sm = Small ≥ 576px\r\n    md = Medium ≥ 768px\r\n    lg = Large ≥ 992px\r\n    xl = Extra large ≥ 1200px\r\n\r\nIf you have installed YouSee DNA you can/should write your media queries like this:\r\n\r\n    @media (min-width: $ys-breakpoint-sm) { ... }\r\n    @media (min-width: $ys-breakpoint-md) { ... }\r\n    @media (min-width: $ys-breakpoint-lg) { ... }\r\n    @media (min-width: $ys-breakpoint-xl) { ... }\r\n\r\n## Vendor-specific prefixes\r\n\r\nDon't use them. We add them automatically when compiling SCSS code to CSS . In some rare cases you still need to add them though.\r\n\r\n**Bad example**\r\n\r\n    -webkit-border-radius: 12px;\r\n    -moz-border-radius: 12px;\r\n    border-radius: 12px;\r\n\r\n**Good example**\r\n\r\n    border-radius: 12px;\r\n\r\n## !important\r\n\r\nUsing !important is bad practice and should be avoided. It makes it difficult to override if necessary and breaks the natural cascading in your stylesheets. Always look for a way to use specificity before even considering !important.\r\nBy indicating one or more elements before the element you're selecting, the rule becomes more specific and gets higher priority. If you HAVE to use !important please remember to disable the linter for that particular line: `/* stylelint-disable-line declaration-no-important */`.\r\n\r\n**Bad example**\r\n\r\n    .element {\r\n      display: none !important;\r\n    }\r\n\r\n**Good example**\r\n\r\n    .class .element {\r\n      display: none;\r\n    }\r\n\r\n    // or if you have to\r\n\r\n    .element {\r\n      display: none; /* stylelint-disable-line declaration-no-important */\r\n    }\r\n\r\n## Pseudo elements\r\n\r\nAlways declare pseudo-elements with double colon notation. The double colon replaced the single-colon notation for pseudo-elements in CSS3.\r\n\r\nAlso, for pseudo-classes the specs says one single colon.\r\n\r\n**Bad example**\r\n\r\n    .element:before {\r\n      content: 'This is bad';\r\n\r\n      &:hover {\r\n        //\r\n      }\r\n    }\r\n\r\n**Good example**\r\n\r\n    .element::before {\r\n      content: 'This is good';\r\n\r\n      &:hover {\r\n        //\r\n      }\r\n    }\r\n\r\n## Units\r\n\r\n**Rem vs pixels**\r\nBecause our design files is normally made in pixels it makes good sense for us to use pixels too. In that way we are talking the same \"language\".\r\nBut because pixels doesn't scale are we using a small REM mixin. If you need to write _10px_ you should use _rem(10)_ instead. Our rem function will then take the pixel value and divide it with 16px (our base font-size). That will return it in rem which is a proportional CSS unit.  So, 10px = rem(10) = 0.625rem.\r\n\r\nValues below one should never have a leading zero and if it's a comma-seperated list, there should be a space after each comma.\r\n\r\n**Borders**:\r\nYou can use px for borders because it doesn't make sense to scale a border. Also, px-based values are allowed for box-shadows too.\r\n\r\n**Bad example**\r\n\r\n    .element {\r\n      width: 20px;\r\n      height: 80px;\r\n      animation-duration: 0.5s;\r\n      border: .975em solid black;\r\n      padding-top: 10px;\r\n    }\r\n\r\n**Good example**\r\n\r\n    .element {\r\n      width: rem(20);\r\n      height: rem(80);\r\n      animation-duration: .5s;\r\n      border: 1px solid $color-black;\r\n      padding-top: rem(10)\r\n    }\r\n\r\n## Sass's ampersand\r\n\r\nThe ampersand \"&\" is a nice Sass feature. But please use it for pseudo classes and for elements and modifiers only. If we use it elsewhere the code will become difficult to read.\r\n\r\n**Bad example**\r\n\r\n    .time {\r\n      //\r\n\r\n      &__timestamp {\r\n        //\r\n\r\n        &-title {\r\n          //\r\n\r\n          &-date {\r\n            //\r\n          }\r\n       }\r\n    }\r\n\r\n**Good example**\r\n\r\n    .time {\r\n      //\r\n\r\n      &__timestamp {\r\n        //\r\n      }\r\n\r\n      &__timestamp-title {\r\n        //\r\n      }\r\n\r\n      &__timestamp-title-date {\r\n        //\r\n      }\r\n    }\r\n\r\n",
    "data": {
        "title": "CSS & SCSS Guidelines",
        "url": "/docs/code-guidelines/css-and-scss-guidelines",
        "category": "code-guidelines",
        "primaryKeywords": "code bem sass stylelint class selector media query",
        "secondaryKeywords": "cursor mobile first shorthand pseudo element !important important ys"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\nWe want to make sure our products can be used by all users. This mean we have a responsibility to make our websites accessible too. To ensure this all YouSee sites and web applications must adhere to the [WCAG 2.1 AA guidelines](https://www.w3.org/TR/WCAG21/).\r\n\r\n## Common Failures\r\n\r\n### Low Contrast\r\nThe WCAG 2.1 AA guidelines state that text should have a contrast ratio of 4.5:1 except when the text is \"Large Text\". \"Large Text\" is defined as being either set with a minimum font size of 24px (regular) OR a minimum font size of 19px (bold).\r\nThe colors provided in YouSee DNA must be used as stated to comply with this guideline.\r\n\r\nTo calculate contrast ratio of new colors, we recommend using [Lea Verou's contrast ratio tool](https://contrast-ratio.com/).\r\n\r\n### Keyboard Navigation\r\nAll content must be accessible through keyboard navigation. To make sure this is the case, follow these simple tips:\r\n- Never remove the `:focus` property completely in CSS.\r\n- Use semantic HTML at all times, especially when it comes to interactive elements; ie. use a `<button>` element for togglable content, burger navigation etc.\r\n- Make sure your content comes in the right order, so the `focus`-styles don't jump around the page, but follow a linear pattern.\r\n\r\n### ALT-attributes\r\nAlways provide `alt`-attributes for images. If the image is purely decorational, please provide an empty `alt`-attribute, ie.: `<img src=\"image.png\" alt=\"\" />` — this will prevent screen readers from reading out the source file's name (which in this case would be \"i m a g e period p n g\").\r\n\r\n### Provide a site language\r\nAlways add language to the HTML document, ie.: `<html lang=\"da\">`. This helps assistive technologies such as screen readers to render the content in the right language.\r\n\r\n### Provide textual content\r\nSome buttons or links might only visually contain an icon or an image, but they should always contain textual content as well. In these cases it is possible to hide the textual content visually, while it's still availabe to assistive technologies. Code example:\r\n```\r\n<button>\r\n  <img src=\"download-icon.png\" alt=\"\" />\r\n  <span class=\"visually-hidden\">Download file</span>\r\n</button>\r\n```\r\nWhile this could also be solved using the `aria-label` attribute, textual content is  considered as best practice for many reasons:\r\n- If CSS fails to load or apply correctly, using real text will still be accessible.\r\n- Textual content is best for search engines. Aria-labels is only considered as alternative text for screen reader users and not preferable when it comes to SEO.\r\n- Screen readers such as NVDA, JAWS, VoiceOver, Win-Eyes, Dolphin and\tSaToGo has different reliability. Many of them don't suppport aria-label if it's used on some elements such as `<input>`, `<span>`, `<a>` and `<div>` elements.\r\n\r\n### Form labeling\r\nAll form inputs (`<input>`, `<textarea>`, `<select>` etc.) must have an associated `<label>` element. This can be done either explicitly (through an `id` attribute) or implicitly (`<input>` is inside the `<label>`). The `<placeholder>`-attribute is NEVER an acceptable substitute for the `<label>` element and is generally considered bad for usability and accessibility.\r\n\r\n### Heading order\r\nHeading elements should always come in the correct order and never skip a level: an `<h6>` should always be preceded by an `<h5>` should always be preceded by an `<h4>` should always be preceded by an `<h3>` should always be preceded by an `<h2>` should always be preceded by an `<h1>`.\r\n\r\n### Link text\r\nAlways provide non-ambigious link (and button) text. The links should never be (only) \"Click here\", \"Read more\", \"Buy this\", \"Continue\" etc. Visually impaired users will in most cases only read the link text (or hear it through a screen reader) and in those cases the link text needs to provide context, ie.: \"Buy the iPhone X\" instead of \"Buy this\".\r\n\r\n### ARIA roles\r\nARIA roles are generally not needed when using semantic HTML, except when creating custom UI elements such as accordions, toggle functionality, modal windows etc. Dynamic sites such as single page applications tend to get a little more complicated when it comes to accessibility. The WAI-ARIA standard provides tools to tackle accessibility in dynamic applications:  [https://www.w3.org/TR/wai-aria/](https://www.w3.org/TR/wai-aria/).\r\n\r\n## More information\r\n- [W3C Accessibility](https://www.w3.org/standards/webdesign/accessibility)\r\n- [Accessible Rich Internet Applications (WAI-ARIA)](https://www.w3.org/TR/wai-aria/)\r\n\r\n## Tools\r\n- [Google Lighthouse](https://developers.google.com/web/tools/lighthouse/)\r\n- [Web Accessibility Evaluation Tool (WAVE)](https://wave.webaim.org/)\r\n- [Achecker validator](https://achecker.ca/checker/index.php)\r\n- [HTML Codesniffer Bookmarklet](https://squizlabs.github.io/HTML_CodeSniffer/)\r\n",
    "data": {
        "title": "Accessibility Guidelines",
        "url": "/docs/code-guidelines/accessibility-guidelines",
        "category": "code-guidelines",
        "primaryKeywords": "code html css aria a11y focus keyboard navigation html5 semantic",
        "secondaryKeywords": "form label low contrast landmark wai w3"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\nAll contents in YouSee DNA is build for and tested in the browsers below. Any YouSee site or web application must be tested in the same browsers.\r\n\r\n## Desktop\r\n- Chrome (3 latest versions) for Windows, MacOS and Ubuntu <sup>[[1]](#ref1)</sup>\r\n- Firefox (3 latest versions) for Windows, MacOS and Ubuntu <sup>[[1]](#ref1)</sup>\r\n- Safari (2 latest versions) for MacOS <sup>[[2]](#ref2)</sup>\r\n- Edge (3 latest versions) for Windows <sup>[[1]](#ref1)</sup>\r\n- Internet Explorer 11 for Windows <sup>[[4]](#ref4)</sup>\r\n\r\n## Phone & Tablet\r\n- Chrome (3 latest versions) for Android and iOS <sup>[[1]](#ref1)</sup>\r\n- Safari (2 latest versions) for iOS <sup>[[2]](#ref2)</sup>\r\n- Samsung Internet (latest version) for Android <sup>[[3]](#ref3)</sup>\r\n\r\n## Notes\r\nLatest version cover only the major release version, patches and minor updates is not taken into consideration.\r\n\r\n<ol>\r\n    <li id=\"ref1\">Chrome, Firefox and Edge has a short regular release cycle, support for 2 prior version is necessarily.</li>\r\n    <li id=\"ref2\">Safari has a longer release cycle, therefore support for only one prior version is necessary.</li>\r\n    <li id=\"ref3\">Samsung Internet is the new wildcard in the browser realm, luckily based on Chromium, however possibly never updated by the consumer. As a result, only the latest release can be supported.</li>\r\n    <li id=\"ref4\">Partial supported. Small visual bugs are acceptable, given that you can read and interact with the content.</li>\r\n</ol>\r\n",
    "data": {
        "title": "Browser Support",
        "url": "/docs/code-guidelines/browser-support",
        "category": "code-guidelines",
        "primaryKeywords": "code partial supported chrome ie internet explorer ie11 edge firefox opera safari",
        "secondaryKeywords": "device desktop phone tablet ios bugs windows mac"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\nPlease use [GreenSock](https://greensock.com/docs) for animations that require JavaScript or timelines. For more simple animations you'll be fine with CSS animations.\n",
    "data": {
        "title": "Animations",
        "url": "/docs/code-guidelines/animation",
        "category": "code-guidelines",
        "primaryKeywords": "transistion greensock gsap",
        "secondaryKeywords": "javascript css"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\n## Why a Design System\nIt helps creating a consistent and distinctive brand experience\n\n## What is a Design System?\nA Design System is a living, breathing document that contains all our brand’s digital manifestations and a component library that cointains all our visual assets (components, iconography, color pale!es, grids, etc).\nIts purpose consists of explaning to everyone that will work with the brand on a digital environment how to use the brand’s assets the best way possible taking into to consideration, for example, physical color VS display color or interactivity VS static images.\n\n## Offline VS Online\nThere’s a big difference the way you show a brand offline and on online plataforms. A Design System should be designed with a 100% digital mindset, which means, taking into consideration, animations, microinteractions and most importantly, interactivity.\nThose elements cannot be translated into and offline mean, therefore, a Digital CVI should live online, where all those manifestations can be demonstrated and exemplified.\n",
    "data": {
        "title": "Introduction",
        "url": "/docs/design-guidelines/introduction",
        "category": "design-guidelines",
        "primaryKeywords": "design manifestation digital cvi system",
        "secondaryKeywords": "offline online"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\n## 8 Pixel Grid for Vertical Spacing\r\nUses increments of 8 to size and space out the elements on a page. This means that any defined height or width, margin or padding will be an increment of 8 (pixels).\r\n\r\nNowadays, the majority of popular screen sizes are divisible by 8 which makes for an easy fit. Scaling by increments of 8 offers a good amount of options without overloading you with variables like a 6 pixel system, or limiting you like a 10 pixel system.\r\n\r\n## What is the value of using this system?\r\n\r\n### For Designers\r\nEfficiency, less decisions to make while maintaining a rhythm between your elements.\r\n\r\n### For Teams\r\nAn easy system of communication between designers and developers (no fussing over pixels). A developer can easily eyeball an 8pt increment instead of having to measure each time.\r\n\r\n### For Users\r\nConsistent aesthetic to the brand they trust. No blurry half-pixel offsets on their preferred device.\r\n",
    "data": {
        "title": "Grid",
        "url": "/docs/design-guidelines/grid",
        "category": "design-guidelines",
        "primaryKeywords": "design layout row column gutter vertical spacing",
        "secondaryKeywords": "consistent aesthetic 12 column 8 pixels"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\nA colour palette comprises primary and accent colours that can be used for illustration or to develop your brand colors. They’ve been designed to work harmoniously with each other. The colour palette starts with primary colours and secondary colours in a meaningful hierachy that conveys specific meanings.\r\n\r\n> The following colour hierarchy was created to address some branding needs and also to keep it clear to users what is more important in the flow.\r\n\r\n<div class=\"frctl-example colors\">\r\n    <div class=\"colors__convert\">\r\n        <ul class=\"colors__convert-list\">\r\n            <li class=\"colors__convert-item\">\r\n                <button type=\"button\" id=\"toHex\" class=\"colors__convert-button\" active aria-label=\"Convert color codes to hex\">Hex</button>\r\n            </li>\r\n            <li class=\"colors__convert-item\">\r\n                <button type=\"button\" id=\"toRgb\" class=\"colors__convert-button\" aria-label=\"Convert color codes to RGB\">RGB</button>\r\n            </li>\r\n            <li class=\"colors__convert-item\">\r\n                <button type=\"button\" id=\"toHsl\" class=\"colors__convert-button\" aria-label=\"Convert color codes to HSL\">HSL</button>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    {{#each colors}}\r\n        <dl class=\"colors__section\">\r\n            {{#each this}}\r\n                <div class=\"colors__palette\">\r\n                    <dt class=\"colors__title\">{{@key}}</dt>\r\n                    {{#each this}}\r\n                        <dd class=\"colors__item\">\r\n                            <div class=\"colors__color-swatch\" style=\"background-color: {{@this}};\">\r\n                                <code class=\"colors__color-name\" data-bg-color=\"{{@this}}\" data-scss-code=\"$ys-color-{{@key}}\">{{@this}}</code>\r\n                            </div>\r\n                            <code class=\"colors__variable-name\">\r\n                                <span class=\"colors__variable-text\">$ys-color-{{@key}}</span>\r\n                            </code>\r\n                        </dd>\r\n                    {{/each}}\r\n                </div>\r\n            {{/each}}\r\n        </dl>\r\n    {{/each}}\r\n</div>\r\n",
    "data": {
        "title": "Colors",
        "url": "/docs/design-guidelines/colors",
        "category": "design-guidelines",
        "primaryKeywords": "design colour palette primary secondary midnight spring digital",
        "secondaryKeywords": "hex rgb hsl red yellow orange blue grey black green"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\nTypographic hierarchy organizes type and establishes an order of importance within the content and this helps the user to easily find what they are looking for and navigate the content without hesitation.\r\n\r\n> For accessibility reasons we should aim for a line-height adhering to the 8 point grid, which means rounding up numbers to meet the grid specs.\r\n\r\n## YouSee’s Typeface\r\nYouSee use the LTF Etica typeface (designed by [Type Together](https://www.type-together.com/)), which is used throughout the entire website.\r\n\r\nThe usage is limited to the following variations:\r\n- LFT Etica Bold\r\n- LFT Etica SemiBold\r\n- LFT Etica Regular\r\n- LFT Etica Light\r\n\r\n## How to use:\r\n\r\n### Color\r\nAs a general rule, all text on the website should be set in **ys-color-grey-28**, as defined in the [Colors section](colors) or **ys-color-white** when on dark backgrounds.\r\n\r\n### Font sizes and weights\r\nA set of typographic rules have been determined and implemented:\r\n\r\n<table>\r\n  <tr>\r\n    <td></td>\r\n    <th scope=\"col\">Mobile/Tablet<sup>1</sup></th>\r\n    <th scope=\"col\">Desktop<sup>2</sup></th>\r\n  </tr>\r\n  <tr>\r\n    <th scope=\"row\">Main Title<br />`.ys-main-title`</th>\r\n    <td>Font size: 40px<br>Line height: 48px (1.2)<br>font weight: bold (700)</td>\r\n    <td>Font size: 56px<br>Line-height: 72px (1.28)<br>font weight: bold (700)</td>\r\n  </tr>\r\n  <tr>\r\n    <th scope=\"row\">Primary Title<br />`.ys-primary-title`</th>\r\n    <td>Font size: 32px<br>Line height: 40px (1.25)<br>font weight: bold (700)</td>\r\n    <td>Font size: 40px<br>Line-height: 56px (1.28)<br>font weight: bold (700)</td>\r\n  </tr>\r\n  <tr>\r\n    <th scope=\"row\">Secondary Title<br />`.ys-secondary-title`</th>\r\n    <td>Font size: 24px<br>Line height: 32px (1.33)<br>font weight: bold (700)</td>\r\n    <td>Font size: 24px<br>Line-height: 40px (1.67)<br>font weight: bold (700)</td>\r\n  </tr>\r\n  <tr>\r\n    <th scope=\"row\">Subtitle<br />`.ys-subtitle`</th>\r\n    <td>Font size: 24px<br>Line height: 30px (1.25)<br>font weight: light (200)</td>\r\n    <td>Font size: 24px<br>Line-height: 40px (1.67)<br>font weight: light (200)</td>\r\n  </tr>\r\n  <tr>\r\n    <th scope=\"row\">Body Text<br />`.ys-body-text`</th>\r\n    <td colspan=\"2\" style=\"text-align: center\">Font size: 16px<br>Line height: 24px (1.5)<br>font weight: normal (400)</td>\r\n  </tr>\r\n  <tr>\r\n    <th scope=\"row\">Small Text<br />`.ys-small-text`</th>\r\n    <td colspan=\"2\" style=\"text-align: center\">Font size: 12px<br>Line height: 15px (1.25)<br>font weight: normal (400)<br>Font style: italic</td>\r\n</table>\r\n\r\n#### Notes\r\n<sup>1)</sup> \"Mobile/Tablet\" in this context is defined as any device having a viewport with a maximum width of 992px.\r\n\r\n<sup>2)</sup> \"Desktop\" in this context is defined as any device having a viewport with a minimum width of 992px.\r\n\r\n\r\n\r\n",
    "data": {
        "title": "Typography",
        "url": "/docs/design-guidelines/typography",
        "category": "design-guidelines",
        "primaryKeywords": "design text font webfont etica font-size content",
        "secondaryKeywords": "accessibility bold italic rich-text"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\nIcons are the visual expression of a brand’s products, services, and tools. Simple, bold, and friendly, they communicate the core idea and intent of a product. While each product icon is visually distinct, all product icons for a given brand should be unified through concept and execution.\r\n\r\nUse these guidelines as a starting point to ensure that the products icon colors and key elements reflect the brand’s identity.\r\n\r\n## Icon style\r\nAll icons are drawn with a 2 pixel line thickness and occational small filled shapes. All icons should be in **ys-color-grey-28** or **ys-color-white** ([See color definitions](colors)) when used on dark backgrounds. Icons should reflect the text colour.\r\n\r\n> If you are a developer and looking for code examples to implement the SVG icons, please go to Components > Icons & Logo > [Icon](/docs/components/icons-and-logo/icon).\r\n\r\n## YouSee Icon Set\r\n<div class=\"frctl-example\">\r\n    <div class=\"icons\">\r\n        {{#each icons}}\r\n            <div class=\"icons__item\">\r\n                <figcaption class=\"icons__name\">{{@this}}</figcaption>\r\n                <figure class=\"icons__icon\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ys-icon\">\r\n                        <use xlink:href=\"/assets/svg/sprite/icons.svg#ys-icon-{{@this}}\"></use>\r\n                    </svg>\r\n                </figure>\r\n                <div class=\"icons__download\">\r\n                    <a class=\"icons__download-link\" href=\"/assets/svg/{{@this}}.svg\" target=\"_blank\" download aria-label=\"Download {{@this}}.svg\">Download SVG</a>\r\n                </div>\r\n            </div>\r\n        {{/each}}\r\n    </div>\r\n</div>\r\n",
    "data": {
        "title": "Icons",
        "url": "/docs/design-guidelines/icons",
        "category": "design-guidelines",
        "primaryKeywords": "design visual logo brand svg design",
        "secondaryKeywords": "png figure ikon asset iconsystem"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "data": {},
    "content": "",
    "excerpt": "",
    "orig": ""
},{
    "content": "\r\nIn the physical world, objects can be stacked or affixed to one another, but cannot pass through each other. Objects also cast shadows and reflect light. Cards behave like objects so they should respect the same rules as objects.\r\n\r\nCards may contain a photo, text, and a link about a single subject. They may display content containing elements of varying size, such as photos with captions of variable length. A card collection is a layout of cards on the same plane.\r\n\r\n## When to use a card\r\nCollection or gallery comprises multiple data types, such as images, movies, text. When it requires interaction such as swipe, drag and drop, tap, etc.\r\n\r\n## Card shapes\r\nCards are supplied in three basic, very similar shapes, with the only difference being the size of the corner radius:\r\n- 16px\r\n- 8px\r\n- 4px\r\n\r\n### Cards on top of cards\r\nWhen cards are placed inside other cards, their radius should decrease respectively.\r\n",
    "data": {
        "title": "Cards",
        "url": "/docs/design-guidelines/cards",
        "category": "design-guidelines",
        "primaryKeywords": "design objects stack layout stacked affixed",
        "secondaryKeywords": "kort collection gallery"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\nUse the Curved Horizon (Bow) as a breaker or to introduce the next block of content. It consists of a circle inside a mask.\r\n\r\n## When to use the bow\r\n- In the TOP Tile / Hero Image (to add a clear separation of content)\r\n- In the Footer (to state the end of the page)\r\n– DON’T OVER USE IT. No page should contain more than 3 bows\r\n",
    "data": {
        "title": "Bow",
        "url": "/docs/design-guidelines/bow",
        "category": "design-guidelines",
        "primaryKeywords": "design curved horizon breaker block of content",
        "secondaryKeywords": "separation bue"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\nMicrointeractions are the controls that set a website in motion. They also improve usability and make simple tasks – like turning the sound on or off, liking a status update, or sharing a post – not only easy, but also engaging. They blend into a user’s experience naturally.\n\n> “Microinteractions happen through the functional, interactive details of a product, and details... aren’t just the details; they are the design.” - Dan Saffer\n\n## Purpose\nAnimations should be fast and nimble, never keeping the user waiting longer than is necessary. The aim is to prioritize user-perceived performance over technical benchmarks. Motion should help ease the user through the experience. It should aid the flow of actions, giving clear guidance for user orientation: spatial or temporal.\n\n## When to use\n- Guide the user focus between views or to highlight something\n- Hints at what will happen if a user completes a gesture\n- As a distraction from what’s happening behind the scenes (like fetching content or loading the next view)\n",
    "data": {
        "title": "Animations",
        "url": "/docs/design-guidelines/animation",
        "category": "design-guidelines",
        "primaryKeywords": "micro interaction design transition",
        "secondaryKeywords": "fast nimble"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\nRecently YouSee Digital First Tribe decided to go for a better Global Accessibility Rating, The WCAG AA rating. For too long, accessibility has been misunderstood as building sites for a small group of users of assistive technology — a blind person using a screen reader for example — and far too often dismissed as too complex, too time-consuming, or “not our customers.” Accessibility, however, is not just for a single, small group, but for an estimated 15% of people worldwide who have some level of temporary visual, auditory, motor, and cognitive impairments.\r\n\r\n## How to test your content\r\nAutomated testing can be done in several ways, and it is recommended to use at least two different tools, as all tools are built differently and some of the criteria they test against are \"opinonated\".\r\n\r\n### Recommended testing tools\r\n- [Web Accessibility Evaluation Tool (WAVE)](https://wave.webaim.org/)\r\n- [Google Lighthouse](https://developers.google.com/web/tools/lighthouse/)\r\n- [Achecker validator](https://achecker.ca/checker/index.php)\r\n- [HTML Codesniffer Bookmarklet](https://squizlabs.github.io/HTML_CodeSniffer/)\r\n\r\n## Honorable Mention Award\r\nLift your squads most important journeys to a AA rating to win the Tribes' Accessibility Honorable Mention award. Come by Delta Squad if you want to know more on how to do it.\r\n\r\n## Color contrast\r\nThe visual presentation of text and images of text has a contrast ratio of at least 4.5:1, except for the following:\r\n\r\n### Large text<sup>1</sup>\r\nlarge-scale text and images of large scale text have a contrast ratio of at least 3:1.\r\n\r\n### Incidental\r\nText or images of text that are part of an inactive user interface component, that are pure decoration, that are not visible to anyone, or that are part of a picture that contains significant other visual content, have no contrast requirement.\r\n\r\n### Logotypes\r\nText that is part of a logo or brand name has no minimum contrast requirement.\r\n\r\n#### Notes\r\n<sup>1)</sup> Large text is defined as being either a) 19px or above AND bold b) 24px or above.\r\n",
    "data": {
        "title": "Accessibility",
        "url": "/docs/design-guidelines/accessibility",
        "category": "design-guidelines",
        "primaryKeywords": "WCAG AA color contrast requirement",
        "secondaryKeywords": "aria assistive technology screen reader visual auditory motor cognitive impairments a11y"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\nThe Design Principles are the set of qualities that we want customers to associate with the brand every time they interact with it in a digital environment.\r\n\r\n## Alive\r\nCreate positive emotions by designing living and vibrant digital experiences.\r\n\r\n## Iconic\r\nBe recognizable as a brand that creates leading design.\r\n\r\n## Show and try\r\nDemonstrate instead of explaining. Try before you buy.\r\n\r\n## Do more with less\r\nFocus on what’s important, prioritize.\r\n\r\n## Invite & Guide\r\nTaking our users by the hand. Leaving no one at a dead end.\r\n\r\n## Consistent, not uniform\r\nHaving a consistent design language enforcing uniformity.\r\n\r\n## Usable for all\r\nAccessibility at all costs.\r\n\r\n## Personalized\r\nKnowing our customers, providing them with relevant information.\r\n\r\n## Fact based\r\nDesigned based on a solid foundation of statistical data and user insights.\r\n\r\n## Empower the user\r\nAccommodate our customers’ needs at all touchpoints.\r\n",
    "data": {
        "title": "Design Principles",
        "url": "/docs/design-guidelines/design-principles",
        "category": "design-guidelines",
        "primaryKeywords": "recognizable iconic alive consistent",
        "secondaryKeywords": "associate brand interact digital environment"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "'use strict';\n\nmodule.exports = {\n  context: {\n    colors: require('../../tokens/colors.json')\n  }\n};\n",
    "data": {},
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "module.exports = {\n  context: {\n    icons: require('../../tokens/generated/icons.json')\n  }\n};\n",
    "data": {},
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\nDNA provides some simple helper classes for showing/hiding elements depending on the viewport width.\r\n\r\n## Styling on max-width\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"col\">↓ Class name / Max-width →</th>\r\n      <th scope=\"col\">576px</th>\r\n      <th scope=\"col\">768px</th>\r\n      <th scope=\"col\">992px</th>\r\n      <th scope=\"col\">1200px</th>\r\n      <th scope=\"col\">> 1200px</th>\r\n    <tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <th scope=\"row\">`.ys-u-until-sm`</th>\r\n      <td>Visible</td>\r\n      <td>Not visible</td>\r\n      <td>Not visible</td>\r\n      <td>Not visible</td>\r\n      <td>Not visible</td>\r\n    </tr>\r\n    <tr>\r\n      <th scope=\"row\">`.ys-u-until-md`</th>\r\n      <td>Visible</td>\r\n      <td>Visible</td>\r\n      <td>Not visible</td>\r\n      <td>Not visible</td>\r\n      <td>Not visible</td>\r\n    </tr>\r\n    <tr>\r\n      <th scope=\"row\">`.ys-u-until-lg`</th>\r\n      <td>Visible</td>\r\n      <td>Visible</td>\r\n      <td>Visible</td>\r\n      <td>Not visible</td>\r\n      <td>Not visible</td>\r\n    </tr>\r\n    <tr>\r\n      <th scope=\"row\">`.ys-u-until-xl`</th>\r\n      <td>Visible</td>\r\n      <td>Visible</td>\r\n      <td>Visible</td>\r\n      <td>Visible</td>\r\n      <td>Not visible</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## Styling on min-width\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"col\">↓ Class name / Min-width →</th>\r\n      <th scope=\"col\">< 576px</th>\r\n      <th scope=\"col\">576px</th>\r\n      <th scope=\"col\">768px</th>\r\n      <th scope=\"col\">992px</th>\r\n      <th scope=\"col\">1200px</th>\r\n    <tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <th scope=\"row\">`.ys-u-from-sm`</th>\r\n      <td>Not visible</td>\r\n      <td>Visible</td>\r\n      <td>Visible</td>\r\n      <td>Visible</td>\r\n      <td>Visible</td>\r\n    </tr>\r\n    <tr>\r\n      <th scope=\"row\">`.ys-u-from-md`</th>\r\n      <td>Not visible</td>\r\n      <td>Not visible</td>\r\n      <td>Visible</td>\r\n      <td>Visible</td>\r\n      <td>Visible</td>\r\n    </tr>\r\n    <tr>\r\n      <th scope=\"row\">`.ys-u-from-lg`</th>\r\n      <td>Not visible</td>\r\n      <td>Not visible</td>\r\n      <td>Not visible</td>\r\n      <td>Visible</td>\r\n      <td>Visible</td>\r\n    </tr>\r\n    <tr>\r\n      <th scope=\"row\">`.ys-u-from-xl`</th>\r\n      <td>Not visible</td>\r\n      <td>Not visible</td>\r\n      <td>Not visible</td>\r\n      <td>Not visible</td>\r\n      <td>Visible</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n",
    "data": {
        "title": "Media Queries",
        "url": "/docs/components/helper-classes/media-queries",
        "category": "component",
        "primaryKeywords": "ys-u-until- ys-u-from- helper class css max-width min-width",
        "secondaryKeywords": "showing hiding content viewport"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\nThe `ys-u-visuallyhidden` class is used when the UI is showing elements, that _visually_ contain no text, ie. a button that only has an icon on it. In cases like these, we add an element with the `ys-u-visuallyhidden` class on it, to make sure that assistive technologies and search engines understand the purpose of the button.\r\n\r\n**Please notice**: If you import css-files individually instead of using the bundle, be aware that all utility classes are part of the basic `ys-base.css`-file, which is required, so there is no need to import them specifically.\r\n\r\n### CSS\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\" hidden>\r\n    html:not(#ys-specificity) .ys-u-visuallyhidden {\r\n      clip: rect(1px 1px 1px 1px);\r\n      clip: rect(1px, 1px, 1px, 1px);\r\n      height: 1px;\r\n      overflow: hidden;\r\n      position: absolute;\r\n      white-space: nowrap;\r\n      width: 1px;\r\n      padding: 0;\r\n    }\r\n  </div>\r\n</div>\r\n\r\n```css\r\nhtml:not(#ys-specificity) .ys-u-visuallyhidden {\r\n  clip: rect(1px 1px 1px 1px);\r\n  clip: rect(1px, 1px, 1px, 1px);\r\n  height: 1px;\r\n  overflow: hidden;\r\n  position: absolute;\r\n  white-space: nowrap;\r\n  width: 1px;\r\n  padding: 0;\r\n}\r\n```\r\n",
    "data": {
        "title": "Visually Hidden",
        "url": "/docs/components/helper-classes/visually-hidden",
        "category": "component",
        "primaryKeywords": "ys-u-visuallyhidden css helper class accessibility seo",
        "secondaryKeywords": "show hide assistive technologies a11y"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\n**Please notice**: If you installed YouSee DNA with npm, be aware that all utility classes are part of the basic `ys-base.css`-file if you add css-files individually.\r\n\r\n\r\n### ys-u-justify-content-center\r\nThe `ys-u-justify-content-center` utility class can be used to to center flexbox items.\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\" hidden>\r\n    html:not(#ys-specificity) .ys-u-justify-content-center {\r\n      justify-content: center;\r\n    }\r\n  </div>\r\n</div>\r\n\r\n```css\r\nhtml:not(#ys-specificity) .ys-u-justify-content-center {\r\n  justify-content: center;\r\n}\r\n```\r\n\r\n\r\n### ys-u-w-100\r\nThe `ys-u-w-100` utility class forces next columns to break to a new line.\r\nBreaking columns to a new line in flexbox requires a small hack. Add an element with `width: 100%` wherever you want to wrap your columns to a new line.\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\" hidden>\r\n    html:not(#ys-specificity) .ys-u-w-100 {\r\n      width: 100%;\r\n    }\r\n  </div>\r\n</div>\r\n\r\n```css\r\nhtml:not(#ys-specificity) .ys-u-w-100 {\r\n  width: 100%;\r\n}\r\n```\r\n\r\n",
    "data": {
        "title": "Utilities classes for layout",
        "url": "/docs/components/helper-classes/utilities-for-layout",
        "category": "component",
        "primaryKeywords": "helper utility ys-u-justify-content-center ys-u-w-100 layout",
        "secondaryKeywords": "align center break"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\nSplashes are elements often used to display prices, to highlight a benefit or display some kind of advantage.\r\n\r\n<nav class=\"element-navigation\">\r\n  <dl class=\"element-navigation__list\">\r\n    <dt class=\"element-navigation__title\">Table of contents</dt>\r\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\r\n    <dd class=\"element-navigation__item\">[HTML Guidelines](#html-guidelines)</dd>\r\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\r\n  </dl>\r\n</nav>\r\n\r\n# Examples\r\n## Splash\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@splash'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@splash'}}\r\n```\r\n\r\n## Splash, blue\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@splash--blue-splash'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@splash--blue-splash'}}\r\n```\r\n\r\n# HTML Guidelines\r\n\r\n# UX and Design Guidelines\r\n\r\n",
    "data": {
        "title": "Splash",
        "url": "/docs/components/badges/splash",
        "category": "component",
        "primaryKeywords": "ys-splash css badgde price",
        "secondaryKeywords": "highlight blue yellow offer"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "Tags are elements used to categorize content.\r\n\r\n<nav class=\"element-navigation\">\r\n  <dl class=\"element-navigation__list\">\r\n    <dt class=\"element-navigation__title\">Table of contents</dt>\r\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\r\n    <dd class=\"element-navigation__item\">[HTML Guidelines](#html-guidelines)</dd>\r\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\r\n  </dl>\r\n</nav>\r\n\r\n# Examples\r\n## Tag\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@tag'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@tag'}}\r\n```\r\n\r\n# HTML Guidelines\r\n\r\n# UX and Design Guidelines\r\n",
    "data": {},
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\n<nav class=\"element-navigation\">\r\n  <dl class=\"element-navigation__list\">\r\n    <dt class=\"element-navigation__title\">Table of contents</dt>\r\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\r\n    <dd class=\"element-navigation__item\">[HTML Guidelines](#html-guidelines)</dd>\r\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\r\n  </dl>\r\n</nav>\r\n\r\n# Examples\r\n## Tabs\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@tabs'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@tabs'}}\r\n```\r\n\r\n# HTML Guidelines\r\nThese tabs must always be implemented in an accessible manner — please refer to https://w3c.github.io/aria-practices/examples//tabs/tabs-1/tabs.html for HTML Structure and JavaScript functionality.\r\n\r\n# UX and Design Guidelines\r\n\r\n",
    "data": {
        "title": "Tabs",
        "url": "/docs/components/interactions/tabs",
        "category": "component",
        "primaryKeywords": "ys-tabs css interaction",
        "secondaryKeywords": "menu navigation tablist list"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\n<nav class=\"element-navigation\">\r\n  <dl class=\"element-navigation__list\">\r\n    <dt class=\"element-navigation__title\">Table of contents</dt>\r\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\r\n    <dd class=\"element-navigation__item\">[HTML Guidelines](#html-guidelines)</dd>\r\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\r\n  </dl>\r\n</nav>\r\n\r\n# Examples\r\n## Notification (info)\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@notification'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@notification'}}\r\n```\r\n\r\n## Notification (warning)\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@notification--warning'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@notification--warning'}}\r\n```\r\n\r\n## Notification (success)\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@notification--success'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@notification--success'}}\r\n```\r\n\r\n## Notification (error)\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@notification--error'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@notification--error'}}\r\n```\r\n\r\n## Notification with no shadow (info)\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@notification--with-no-shadow'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@notification--with-no-shadow'}}\r\n```\r\n\r\n\r\n# HTML Guidelines\r\n\r\n# UX and Design Guidelines\r\nNotifications should be used on top of content and positioned in another layer like a modal on top of content.\r\n",
    "data": {
        "title": "Notifications",
        "url": "/docs/components/feedback/notifications",
        "category": "component",
        "primaryKeywords": "ys-notification css feedback info",
        "secondaryKeywords": "critical warning error success box"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\n<nav class=\"element-navigation\">\r\n  <dl class=\"element-navigation__list\">\r\n    <dt class=\"element-navigation__title\">Table of contents</dt>\r\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\r\n    <dd class=\"element-navigation__item\">[HTML Guidelines](#html-guidelines)</dd>\r\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\r\n  </dl>\r\n</nav>\r\n\r\n# Examples\r\n## Progress bar\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@progress--default'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@progress--default'}}\r\n```\r\n\r\n## on dark background\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@progress--progress-bar-on-dark-background'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@progress--progress-bar-on-dark-background'}}\r\n```\r\n\r\n# HTML Guidelines\r\n\r\n# UX and Design Guidelines\r\n\r\n",
    "data": {
        "title": "Progress Bar",
        "url": "/docs/components/feedback/progress-bar",
        "category": "component",
        "primaryKeywords": "ys-progress css feedback steps",
        "secondaryKeywords": "minvalue maxvalue"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\n<nav class=\"element-navigation\">\r\n  <dl class=\"element-navigation__list\">\r\n    <dt class=\"element-navigation__title\">Table of contents</dt>\r\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\r\n    <dd class=\"element-navigation__item\">[HTML Guidelines](#html-guidelines)</dd>\r\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\r\n  </dl>\r\n</nav>\r\n\r\n# Examples\r\n## Flow steps\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@flow-steps'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@flow-steps'}}\r\n```\r\n\r\n## Vertical flow steps\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@flow-steps--vertical'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@flow-steps--vertical'}}\r\n```\r\n\r\n# HTML Guidelines\r\n\r\n# UX and Design Guidelines\r\n\r\n",
    "data": {
        "title": "Flow Steps",
        "url": "/docs/components/feedback/flow-steps",
        "category": "component",
        "primaryKeywords": "ys-flow-steps css feedback progressbar",
        "secondaryKeywords": "minvalue maxvalue valuemax valuemin"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\n<nav class=\"element-navigation\">\r\n  <dl class=\"element-navigation__list\">\r\n    <dt class=\"element-navigation__title\">Table of contents</dt>\r\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\r\n    <dd class=\"element-navigation__item\">[HTML Guidelines](#html-guidelines)</dd>\r\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\r\n  </dl>\r\n</nav>\r\n\r\n# Example\r\n## Spinner\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@spinner'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@spinner'}}\r\n```\r\n\r\n# HTML Guidelines\r\n\r\n# UX and Design Guidelines\r\nTry to always keep spinners in page and not in overlays.\r\nIf a spinner is triggered by a button, place the spinner in the button, and disable the button while the spinner is visible.\r\n\r\nIf only a portion of a page is displaying new content or being updated, place the spinner in that part of the page.\r\n\r\nIf you are unsure where to place the spinner, place it where you want the user's attention to be when loading is finished.\r\nOnly show a spinner if the expected wait time is more than a second.\r\n\r\n",
    "data": {
        "title": "Spinner",
        "url": "/docs/components/feedback/spinner",
        "category": "component",
        "primaryKeywords": "ys-spinner css feedback loading",
        "secondaryKeywords": "indicator spin interaction rotate"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\nInput fields should always follow these requirements:\r\n- Identifiable Using a tappable touch target, text fields should indicate that users can enter information.\r\n- Findable It should be easy to find a text field among other elements.\r\n- Legible Text fields should indicate their state – whether enabled or disabled, empty or filled, valid or invalid – with clear label, input, and assistive text.\r\n\r\n<nav class=\"element-navigation\">\r\n  <dl class=\"element-navigation__list\">\r\n    <dt class=\"element-navigation__title\">Table of contents</dt>\r\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\r\n    <dd class=\"element-navigation__item\">[HTML Guidelines](#html-guidelines)</dd>\r\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\r\n  </dl>\r\n</nav>\r\n\r\n# Examples\r\n## Input field\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@input-field'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@input-field'}}\r\n```\r\n\r\n## Input field on dark background\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@input-field--input-on-dark-background'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@input-field--input-on-dark-background'}}\r\n```\r\n\r\n## Input field with guidance text\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@input-field--input-with-guidance-text'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@input-field--input-with-guidance-text'}}\r\n```\r\n\r\n## Input field with valid input\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@input-field--input-with-valid-input'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@input-field--input-with-valid-input'}}\r\n```\r\n\r\n## Input field with invalid input\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@input-field--input-with-invalid-input'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@input-field--input-with-invalid-input'}}\r\n```\r\n\r\n## Disabled input field\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@input-field--disabled-input'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@input-field--disabled-input'}}\r\n```\r\n\r\n## Readonly input field\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@input-field--readonly-input'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@input-field--readonly-input'}}\r\n```\r\n\r\n# HTML Guidelines\r\n\r\n# UX and Design Guidelines\r\n",
    "data": {
        "title": "Input Field",
        "url": "/docs/components/form-elements/input-field",
        "category": "component",
        "primaryKeywords": "ys-input-field css form label",
        "secondaryKeywords": "enter information guidance icon invalid"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\n<nav class=\"element-navigation\">\r\n  <dl class=\"element-navigation__list\">\r\n    <dt class=\"element-navigation__title\">Table of contents</dt>\r\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\r\n    <dd class=\"element-navigation__item\">[HTML Guidelines](#html-guidelines)</dd>\r\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\r\n  </dl>\r\n</nav>\r\n\r\n# Examples\r\n## Select\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@select'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@select'}}\r\n```\r\n\r\n\r\n## Select on dark background\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@select--select-on-dark-background'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@select--select-on-dark-background'}}\r\n```\r\n\r\n\r\n## Select with guidance text\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@select--select-with-guidance-text'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@select--select-with-guidance-text'}}\r\n```\r\n\r\n\r\n## Disabled select\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@select--select-(disabled)'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@select--select-(disabled)'}}\r\n```\r\n\r\n## Select, alternative\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@select--alternative'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@select--alternative'}}\r\n```\r\n\r\n## Select, alternative on dark background\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@select--alternative-on-dark-background'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@select--alternative-on-dark-background'}}\r\n```\r\n\r\n## Disabled select, alternative\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@select--alternative-(disabled)'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@select--alternative-(disabled)'}}\r\n```\r\n\r\n# HTML Guidelines\r\n\r\n# UX and Design Guidelines\r\nThe alternative version should only be used when it's the only form element in a component.\r\n",
    "data": {
        "title": "Select",
        "url": "/docs/components/form-elements/select",
        "category": "component",
        "primaryKeywords": "ys-select css form",
        "secondaryKeywords": "option label disabled"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\n<nav class=\"element-navigation\">\r\n  <dl class=\"element-navigation__list\">\r\n    <dt class=\"element-navigation__title\">Table of contents</dt>\r\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\r\n    <dd class=\"element-navigation__item\">[HTML Guidelines](#html-guidelines)</dd>\r\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\r\n  </dl>\r\n</nav>\r\n\r\n# Examples\r\n## Textarea\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@textarea'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@textarea'}}\r\n```\r\n\r\n## Textarea on dark background\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@textarea--textarea-on-dark-background'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@textarea--textarea-on-dark-background'}}\r\n```\r\n\r\n## Textarea with guidance text\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@textarea--textarea-with-guidance-text'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@textarea--textarea-with-guidance-text'}}\r\n```\r\n\r\n## Disabled textarea\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@textarea--disabled-textarea'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@textarea--disabled-textarea'}}\r\n```\r\n\r\n## Readonly textarea\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@textarea--readonly-textarea'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@textarea--readonly-textarea'}}\r\n```\r\n\r\n# HTML Guidelines\r\n\r\n# UX and Design Guidelines\r\n\r\n",
    "data": {
        "title": "Textarea",
        "url": "/docs/components/form-elements/textarea",
        "category": "component",
        "primaryKeywords": "ys-textarea css form",
        "secondaryKeywords": "label tekst block input"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\n<nav class=\"element-navigation\">\r\n  <dl class=\"element-navigation__list\">\r\n    <dt class=\"element-navigation__title\">Table of contents</dt>\r\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\r\n    <dd class=\"element-navigation__item\">[HTML Guidelines](#html-guidelines)</dd>\r\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\r\n  </dl>\r\n</nav>\r\n\r\n# Examples\r\n## Checkbox\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@checkbox'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@checkbox'}}\r\n```\r\n\r\n## Checkbox on dark background\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@checkbox--checkbox-on-dark-background'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@checkbox--checkbox-on-dark-background'}}\r\n```\r\n\r\n## Disabled checkbox\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@checkbox--checkbox-(disabled)'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@checkbox--checkbox-(disabled)'}}\r\n```\r\n\r\n## Disabled checkbox on dark background\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@checkbox--checkbox-(disabled)-on-dark-background'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@checkbox--checkbox-(disabled)-on-dark-background'}}\r\n```\r\n\r\n# HTML Guidelines\r\n\r\n# UX and Design Guidelines\r\nCheckboxes are used when there are lists of options and the user may select any number of choices, including zero, one, or several. In other words, each checkbox is independent of all other checkboxes in the list, so checking one box doesn't uncheck the others. A stand-alone checkbox is used for a single option that the user can turn on or off. (source: [Checkboxes vs. Radio Buttons](https://www.nngroup.com/articles/checkboxes-vs-radio-buttons/))\r\n\r\nCheckboxes must never be distributed horizontally at it makes it harder to:\r\n- scan the options\r\n- distinguish which checkbox a label is associated with\r\n",
    "data": {
        "title": "Checkbox",
        "url": "/docs/components/form-elements/checkbox",
        "category": "component",
        "primaryKeywords": "ys-checkbox css form check",
        "secondaryKeywords": "label dissallow agree thanks yes no ja tak input"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\n<nav class=\"element-navigation\">\r\n  <dl class=\"element-navigation__list\">\r\n    <dt class=\"element-navigation__title\">Table of contents</dt>\r\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\r\n    <dd class=\"element-navigation__item\">[HTML Guidelines](#html-guidelines)</dd>\r\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\r\n  </dl>\r\n</nav>\r\n\r\n# Examples\r\n## Radio Button\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@radio-button'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@radio-button'}}\r\n```\r\n\r\n## Radio Button on dark background\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@radio-button--radio-button-on-dark-background'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@radio-button--radio-button-on-dark-background'}}\r\n```\r\n\r\n## Disabled radio-button\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@radio-button--radio-button-(disabled)'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@radio-button--radio-button-(disabled)'}}\r\n```\r\n\r\n## Disabled radio-button on dark background\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@radio-button--radio-button-(disabled)-on-dark-background'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@radio-button--radio-button-(disabled)-on-dark-background'}}\r\n```\r\n\r\n# HTML Guidelines\r\n\r\n# UX and Design Guidelines\r\nRadio buttons are used when there is a list of two or more options that are mutually exclusive and the user must select exactly one choice. In other words, clicking a non-selected radio button will deselect whatever other button was previously selected in the list. (source: [Checkboxes vs. Radio Buttons](https://www.nngroup.com/articles/checkboxes-vs-radio-buttons/))\r\n\r\nRadio Buttons must never be distributed horizontally at it makes it harder to:\r\n- scan the options\r\n- distinguish which radiobox a label is associated with\r\n",
    "data": {
        "title": "Radiobutton",
        "url": "/docs/components/form-elements/radiobutton",
        "category": "component",
        "primaryKeywords": "ys-radio-button css form option",
        "secondaryKeywords": "select deselect yes no input"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\n<nav class=\"element-navigation\">\r\n  <dl class=\"element-navigation__list\">\r\n    <dt class=\"element-navigation__title\">Table of contents</dt>\r\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\r\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\r\n  </dl>\r\n</nav>\r\n\r\n# Examples\r\n## Select\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@toggle-switch'}}</div>\r\n</div>\r\n```html\r\n{{render '@toggle-switch'}}\r\n```\r\n\r\n# UX and Design Guidelines\r\nThe toggle switch should only be used when the action is saved immediately and doesn't require a \"Submit\" button. That makes the Toggle Switch ideal for application purposes and it's not suitable for normal forms.\r\n",
    "data": {
        "title": "Toggle Switch",
        "url": "/docs/components/form-elements/toggle-switch",
        "category": "component",
        "primaryKeywords": "ys-toggle-switch css form checkbox",
        "secondaryKeywords": "switch input label on off"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\n<nav class=\"element-navigation\">\r\n  <dl class=\"element-navigation__list\">\r\n    <dt class=\"element-navigation__title\">Table of contents</dt>\r\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\r\n    <dd class=\"element-navigation__item\">[HTML Guidelines](#html-guidelines)</dd>\r\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\r\n  </dl>\r\n</nav>\r\n\r\n# Examples\r\n## Slider\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@slider'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@slider'}}\r\n```\r\n\r\n## Slider with data labels\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@slider--with-data'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@slider--with-data'}}\r\n```\r\n\r\n## Slider with min/max labels\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@slider--with-text'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@slider--with-text'}}\r\n```\r\n\r\n# HTML Guidelines\r\n\r\n# UX and Design Guidelines\r\n\r\n",
    "data": {
        "title": "Slider",
        "url": "/docs/components/form-elements/slider",
        "category": "component",
        "primaryKeywords": "ys-slider css form range",
        "secondaryKeywords": "label input data"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\nButtons are used to make common actions immediately visible and easy to perform with one click, tap, or keypress. Users can use them to navigate or to take action.\r\n\r\n<nav class=\"element-navigation\">\r\n  <dl class=\"element-navigation__list\">\r\n    <dt class=\"element-navigation__title\">Table of contents</dt>\r\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\r\n    <dd class=\"element-navigation__item\">[HTML Guidelines](#html-guidelines)</dd>\r\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\r\n  </dl>\r\n</nav>\r\n\r\n# Examples\r\n## CTA\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@button--call-to-action'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@button--call-to-action'}}\r\n```\r\n\r\n## Default button\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@button'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@button'}}\r\n```\r\n\r\n## Default button, light\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@button--light'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@button--light'}}\r\n```\r\n\r\n\r\n## Secondary button\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@button--secondary-dark'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@button--secondary-dark'}}\r\n```\r\n\r\n## Secondary button, light\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@button--secondary-light'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@button--secondary-light'}}\r\n```\r\n\r\n## Tertiary button\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@button--tertiary-dark'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@button--tertiary-dark'}}\r\n```\r\n\r\n## Tertiary button, light\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@button--tertiary-light'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@button--tertiary-light'}}\r\n```\r\n\r\n## Button with icon\r\nAll of the above can be include an icon, ie. the *default* button:\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@button--with-icon'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@button--with-icon'}}\r\n```\r\n\r\nIn some cases it makes sense to place the icon before the text (e.g. a back button) which is also supported.\r\n\r\n## Icon only button\r\nAll button colorways can be displayed with an icon only, ie. the *default* button:\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@button--icon-only'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@button--icon-only'}}\r\n```\r\nImportant: Never leave out the `<span class=\"ys-button__text\">` element, as this is included for accessibility purposes.\r\n\r\n## Full width button\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@button--block'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@button--block'}}\r\n```\r\n\r\n## Small button\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@button--small'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@button--small'}}\r\n```\r\n\r\n\r\n# HTML Guidelines\r\n - Only `<a>` and `<button>` elements are allowed to use the `.ys-button` class\r\n - Remember to specify the `type` attribute when using a `button` element. The default is `submit` but in most cases you probably want to use `type=\"button\"`\r\n\r\n## Disabled buttons\r\nUse the HTML attribute `disabled` as it will provide default browser behaviour and functionality.\r\n\r\n## Buttons with icons\r\nIf you can't get the button to display an icon please read the HTML instructions under Components > Icons & Logo > [Icon](/docs/components/icons-and-logo/icon)\r\n\r\n\r\n# UX and Design Guidelines\r\n## CTA Usage\r\nThe **CTA** button should only be used for the MAIN or IMPORTANT calls to action on a page.\r\n\r\n## Disabled buttons\r\nPlease be careful when using disabled buttons. Usability research shows that disabled buttons can confuse users: [Disabled Buttons suck](https://axesslab.com/disabled-buttons-suck/)\r\n\r\n## How to combine buttons\r\n- When displaying buttons next to each other or stacked, there should always be at least 16px spacing (margin) on all sides\r\n- Never use more than one **CTA** button in a group\r\n- When two buttons are side by side and perform opposing actions, ie. \"Cancel\" and \"OK\", the affirmative/positive action should always be displayed on the right\r\n\r\n\r\n",
    "data": {
        "title": "Button",
        "url": "/docs/components/form-elements/buttons",
        "category": "component",
        "primaryKeywords": "ys-button css form link submit click hover cta",
        "secondaryKeywords": "cancel call to action disabled"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\n<nav class=\"element-navigation\">\n  <dl class=\"element-navigation__list\">\n    <dt class=\"element-navigation__title\">Table of contents</dt>\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\n    <dd class=\"element-navigation__item\">[HTML Guidelines](#html-guidelines)</dd>\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\n  </dl>\n</nav>\n\n# Example\n<div class=\"element-preview\">\n  <div class=\"element-preview__inner\">{{render '@shortcut'}}</div>\n</div>\n\n```html\n{{render '@shortcut'}}\n```\n\n# HTML Guidelines\n1. Make sure you change the path in the `xlink:href` attribute to match your own SVG file. Copy the file from DNA (the node_modules folder) to your own solution. This is something you need to do automatically through webpack, gulp or another task-runner everytime you build your solution. Please don't copy it manually because then it can get outdated.\n\n2. Change the ID of the icon to match the one you want to use. E.g. `#ys-icon-wifi` would give you the wifi icon.\nFor a full overview of all available icons, please visit Design Guidelines > [Icons](/docs/design-guidelines/icons).\n\n3. For IE11 support of SVG Sprites please include [SVG for Everybody](https://github.com/jonathantneal/svg4everybody).\n\n# UX and Design Guidelines\n",
    "data": {
        "title": "Shortcut",
        "url": "/docs/components/icons-and-logo/shortcut",
        "category": "component",
        "primaryKeywords": "ys-shortcut css icon image svg css",
        "secondaryKeywords": "ikon genvej"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\n<nav class=\"element-navigation\">\n  <dl class=\"element-navigation__list\">\n    <dt class=\"element-navigation__title\">Table of contents</dt>\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\n    <dd class=\"element-navigation__item\">[HTML Guidelines](#html-guidelines)</dd>\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\n  </dl>\n</nav>\n\n# Example\n<div class=\"element-preview\">\n  <div class=\"element-preview__inner\">{{ render '@icon--plus' }}</div>\n</div>\n\n```html\n{{render '@icon--plus'}}\n```\n\n# HTML Guidelines\n1. Make sure you change the path in the `xlink:href` attribute to match your own SVG file. Copy the file from DNA (the node_modules folder) to your own solution. This is something you need to do automatically through webpack, gulp or another task-runner everytime you build your solution. Please don't copy it manually because then it can get outdated.\n\n2. Change the ID of the icon to match the one you want to use. E.g. `#ys-icon-wifi` would give you the wifi icon.\nFor a full overview of all available icons, please visit Design Guidelines > [Icons](/docs/design-guidelines/icons).\n\n3. For IE11 support of SVG Sprites please include [SVG for Everybody](https://github.com/jonathantneal/svg4everybody).\n\n# UX and Design Guidelines\nIcons are the visual expression of a brand’s products, services, and tools. Simple, bold, and friendly, they communicate the core idea and intent of a product. While each product icon is visually distinct, all product icons for a given brand should be unified through concept and execution.\n\nUse these guidelines as a starting point to ensure that the products icon colors and key elements reflect the brand’s identity.\n\n## Icon style\nAll icons are drawn with a 2 pixel line thickness and occational small filled shapes. All icons should be in **ys-color-grey-28** or **ys-color-white** ([See color definitions](/docs/design-guidelines/colors)) when used on dark backgrounds. Icons should reflect the text colour.\n",
    "data": {
        "title": "Icon",
        "url": "/docs/components/icons-and-logo/icon",
        "category": "component",
        "primaryKeywords": "ys-icon yousee icons images sprite svg css",
        "secondaryKeywords": "brand png"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\n<nav class=\"element-navigation\">\n  <dl class=\"element-navigation__list\">\n    <dt class=\"element-navigation__title\">Table of contents</dt>\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\n    <dd class=\"element-navigation__item\">[HTML Guidelines](#html-guidelines)</dd>\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\n  </dl>\n</nav>\n\n# Examples\n## Logo\n<div class=\"element-preview\">\n  <div class=\"element-preview__inner\">{{render '@logo'}}</div>\n</div>\n\n```html\n{{render '@logo'}}\n```\n\n## Logo on dark background\n<div class=\"element-preview element-preview--dark\">\n  <div class=\"element-preview__inner\">{{render '@logo--light'}}</div>\n</div>\n\n```html\n{{render '@logo--light'}}\n```\n\n# HTML Guidelines\nCopy the code directly into your soluton. Screenreaders will read \"yousee\" unless you add `aria-hidden=\"true\"` to the SVG element.\n\n# UX and Design Guidelines\nPlease respect the colors of the logo. Don't change the color of the logo on yousee.dk.",
    "data": {
        "title": "YouSee Logo",
        "url": "/docs/components/icons-and-logo/logo",
        "category": "component",
        "primaryKeywords": "ys-icon yousee css icon image svg",
        "secondaryKeywords": "brand cvi"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\n<nav class=\"element-navigation\">\r\n  <dl class=\"element-navigation__list\">\r\n    <dt class=\"element-navigation__title\">Table of contents</dt>\r\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\r\n    <dd class=\"element-navigation__item\">[HTML Guidelines](#html-guidelines)</dd>\r\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\r\n  </dl>\r\n</nav>\r\n\r\n# Examples\r\n## Main title\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@typography--default'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@typography--default'}}\r\n```\r\n\r\n## Main title (light)\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@typography--main-title-light'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@typography--main-title-light'}}\r\n```\r\n\r\n## Primary title\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@typography--primary-title'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@typography--primary-title'}}\r\n```\r\n\r\n## Primary title (light)\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@typography--primary-title-light'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@typography--primary-title-light'}}\r\n```\r\n\r\n## Secondary title\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@typography--secondary-title'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@typography--secondary-title'}}\r\n```\r\n\r\n## Secondary title (light)\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@typography--secondary-title-light'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@typography--secondary-title-light'}}\r\n```\r\n\r\n## Subtitle\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@typography--subtitle'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@typography--subtitle'}}\r\n```\r\n\r\n## Subtitle (light)\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@typography--subtitle-light'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@typography--subtitle-light'}}\r\n```\r\n\r\n## Body text\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@typography--body-text'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@typography--body-text'}}\r\n```\r\n\r\n## Body text (light)\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@typography--body-text-light'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@typography--body-text-light'}}\r\n```\r\n\r\n## Body text large\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@typography--body-text-large'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@typography--body-text-large'}}\r\n```\r\n\r\n## Body text large (light)\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@typography--body-text-large-light'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@typography--body-text-large-light'}}\r\n```\r\n\r\n## Body text large bold\r\n\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@typography--body-text-large-bold'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@typography--body-text-large-bold'}}\r\n```\r\n\r\n## Body text large bold (light)\r\n\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@typography--body-text-large-bold-light'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@typography--body-text-large-bold'}}\r\n```\r\n\r\n## Small text\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@typography--small-text'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@typography--small-text'}}\r\n```\r\n\r\n## Small text (light)\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@typography--small-text-light'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@typography--small-text-light'}}\r\n```\r\n\r\n## Unordered list\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@typography--unordered-list'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@typography--unordered-list'}}\r\n```\r\n\r\n## Unordered list (light)\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@typography--unordered-list-light'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@typography--unordered-list-light'}}\r\n```\r\n\r\n## Ordered list\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@typography--ordered-list'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@typography--ordered-list'}}\r\n```\r\n\r\n## Ordered list (light)\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@typography--ordered-list-light'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@typography--ordered-list-light'}}\r\n```\r\n\r\n# HTML Guidelines\r\nAlways mark up text semantically, ie. only use one `<h1>` per page, even if the design shows two “Main Title” elements. The visual representation is handled by CSS and not the HTML.\r\n\r\nPlease be aware that the color of the text is not set in the CSS classes and should be set on the parent element.\r\n\r\n# UX and Design Guidelines\r\nFor accessibility reasons we should aim for a line-height adhering to the 8 point grid, which means rounding up numbers to meet the grid specs.\r\n\r\n## Color\r\nAll fonts on the website should use the specified grey called “grey-10” (#191919). Exceptions are:\r\n- When used on dark background. In this case use white (#fff) instead\r\n- Special cases\r\n",
    "data": {
        "title": "Typography",
        "url": "/docs/components/text/typography",
        "category": "component",
        "primaryKeywords": "font css text ys-main-title ys-primary-title ys-secondary-title ys-subtitle ys-body-text ys-small-text ys-list",
        "secondaryKeywords": "grey-28 484848 100 200 400 700 800 900"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\nRich Text is used for content provided by editors in Content Management Systems. These systems usually output a big chunk of HTML without classes, so DNA provides a container (`ys-rich-text`), which adds styling similar to the typography styles to the corresponding HTML elements.\r\n\r\n<nav class=\"element-navigation\">\r\n  <dl class=\"element-navigation__list\">\r\n    <dt class=\"element-navigation__title\">Table of contents</dt>\r\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\r\n    <dd class=\"element-navigation__item\">[HTML Guidelines](#html-guidelines)</dd>\r\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\r\n  </dl>\r\n</nav>\r\n\r\n# Examples\r\n## Rich Text\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@rich-text'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@rich-text'}}\r\n```\r\n\r\n## Rich Text on dark background\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@rich-text--rich-text-on-dark-background'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@rich-text--rich-text-on-dark-background'}}\r\n```\r\n\r\n# HTML Guidelines\r\nWrap the output element in a `ys-rich-text` container.\r\n\r\n# UX and Design Guidelines\r\n\r\n",
    "data": {
        "title": "Rich Text",
        "url": "/docs/components/text/rich-text",
        "category": "component",
        "primaryKeywords": "ys-rich-text css html cms content",
        "secondaryKeywords": "sitecore container editor wysiwyg"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\n<nav class=\"element-navigation\">\r\n  <dl class=\"element-navigation__list\">\r\n    <dt class=\"element-navigation__title\">Table of contents</dt>\r\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\r\n  </dl>\r\n</nav>\r\n\r\n# Examples\r\n## Link\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@link'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@link'}}\r\n```\r\n\r\n## Link on dark background\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@link--link-on-dark-background'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@link'}}\r\n```\r\n# HTML Guidelines\r\n\r\n# UX and Design Guidelines\r\n## Text-decoration\r\nAll text-links should have an underline to clearly show the users that the element is clickable. When hovering the link the cursor should change to a pointer/hand to show the user that cliking will make the browser jump to a new location. The pointer/hand is a default behavior in all desktop browsers when using the `<a>` element.\r\n\r\n## Colors\r\nAll text-links should follow below rules:\r\n1. The default state has hex-color <span style=\"background-color: #1fab2e; color: #fff; padding: 2px 6px;\">#1fab2e</span> with color-code `$ys-color-digital-grass`\r\n2. The hover state has hex-color <span style=\"background-color: #191919; color: #fff; padding: 2px 6px;\">#191919</span> with color-code `$ys-color-grey-10`\r\n3. The visited state has hex-color <span style=\"background-color: #609; color: #fff; padding: 2px 6px;\">#609;</span> with no color-code\r\n4. The active state has hex-color <span style=\"background-color: #191919; color: #fff; padding: 2px 6px;\">#191919</span> with color-code `$ys-color-grey-10`\r\n",
    "data": {
        "title": "Link",
        "url": "/docs/components/text/link",
        "category": "component",
        "primaryKeywords": "ys-link text css hover",
        "secondaryKeywords": "primary visited active"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\nThe grid system supplied with DNA is a fork of Bootstrap's ([v4.3](https://getbootstrap.com/docs/4.3/layout/grid/)) grid, which means that it's:\r\n- mobile first\r\n- flexbox based\r\n- twelve columns\r\n\r\n<nav class=\"element-navigation\">\r\n  <dl class=\"element-navigation__list\">\r\n    <dt class=\"element-navigation__title\">Table of contents</dt>\r\n    <dd class=\"element-navigation__item\">[Differences between DNA and Bootstrap](#differences-between-dna-grid-and-bootstrap-s-grid)</dd>\r\n    <dd class=\"element-navigation__item\">[How it works](#how-it-works)</dd>\r\n    <dd class=\"element-navigation__item\">[Grid settings](#grid-settings)</dd>\r\n    <dd class=\"element-navigation__item\">[Auto Layout](#auto-layout)</dd>\r\n    <dd class=\"element-navigation__item\">[Responsive columns](#responsive-columns)</dd>\r\n    <dd class=\"element-navigation__item\">[Offsetting columns](#offsetting-columns)</dd>\r\n    <dd class=\"element-navigation__item\">[Vertical spacing](#vertical-spacing)</dd>\r\n    <dd class=\"element-navigation__item\">[More documentation](#more-documentation)</dd>\r\n  </dl>\r\n</nav>\r\n\r\n## Differences between DNA grid and Bootstrap's grid\r\n- all class names are prefixed with `ys-`, ie. `.ys-container-fluid`\r\n- the DNA grid does _NOT_ provide flex-utilities\r\n- It is not possible to set custom padding on the gutters\r\n- the DNA grid has the option of vertical spacing\r\n- the DNA grid has variable gutter width depending on the viewport width\r\n\r\n## How it works\r\nThe grid uses containers, rows and columns to align content. A simple example could look like this:\r\n\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@grid--example-01'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@grid--example-01'}}\r\n```\r\n\r\n## Grid settings\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"col\"></th>\r\n      <th scope=\"col\">Extra Small</th>\r\n      <th scope=\"col\">Small</th>\r\n      <th scope=\"col\">Medium</th>\r\n      <th scope=\"col\">Large</th>\r\n      <th scope=\"col\">Extra Large</th>\r\n    <tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <th scope=\"row\">Viewport width</th>\r\n      <td>< 576px</td>\r\n      <td>≥ 576px</td>\r\n      <td>≥ 768px</td>\r\n      <td>≥ 992px</td>\r\n      <td>≥ 1200px</td>\r\n    </tr>\r\n    <tr>\r\n      <th scope=\"row\">Max container width</th>\r\n      <td>n/a</td>\r\n      <td>540px</td>\r\n      <td>720px</td>\r\n      <td>992px</td>\r\n      <td>1172px</td>\r\n    </tr>\r\n    <tr>\r\n      <th scope=\"row\">Class prefix</th>\r\n      <td>`.ys-col`</td>\r\n      <td>`.ys-col-sm-`</td>\r\n      <td>`.ys-col-md-`</td>\r\n      <td>`.ys-col-lg-`</td>\r\n      <td>`.ys-col-xl-`</td>\r\n    </tr>\r\n    <tr>\r\n      <th scope=\"row\">Gutter width</th>\r\n      <td>2 × 6px</td>\r\n      <td colspan=\"2\">2 × 12px</td>\r\n      <td colspan=\"2\">2 × 16px</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## Auto layout\r\nIt is possible to create equal-width columns (regardless of viewport width) without setting width-specific classes on the columns, ie.:\r\n\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@grid--example-02'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@grid--example-02'}}\r\n```\r\n\r\n### Equal-width multi columns\r\nBy inserting a \"breaking\" element, it is also possible to create auto layout columns that span over multiple rows.\r\n\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@grid--example-03'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@grid--example-03'}}\r\n```\r\n\r\n## Responsive columns\r\nIt is possible to add classes that determine a columns width depending on the viewport width, which makes responsive layouts very simple.\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@grid--example-05'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@grid--example-05'}}\r\n```\r\n\r\n## Offsetting columns\r\nYou can offset columns to the right by adding a `ys-offset-` class:\r\n\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@grid--example-06'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@grid--example-06'}}\r\n\r\n## Vertical spacing\r\nIt is possible to add vertical spacing between columns in layouts that span over multiple rows by adding a modifying class to the `ys-row` element.\r\n\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@grid--example-04'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@grid--example-04'}}\r\n```\r\nOptions provided are:\r\n- `ys-row--vertical-spacing-sm` which adds 16px vertical spacing between column elements.\r\n- `ys-row--vertical-spacing-md` which adds 24px vertical spacing between column elements.\r\n- `ys-row--vertical-spacing-lg` which adds 32px vertical spacing between column elements.\r\n- `ys-row--vertical-spacing-xl` which adds 48px vertical spacing between column elements.\r\n\r\n## More documentation\r\nFor more documentation regarding the grid, please refer to [Bootstrap's docs page](https://getbootstrap.com/docs/4.3/layout/grid/), but please remember the [differences](#differences-between-dna-grid-and-bootstrap-s-grid).\r\n",
    "data": {
        "title": "Grid",
        "url": "/docs/components/layout/grid",
        "category": "component",
        "primaryKeywords": "ys-grid css layout bootstrap row column gutter",
        "secondaryKeywords": "mobile first flexbox"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\nIn the physical world, objects can be stacked or affixed to one another, but cannot pass through each other. Objects also cast shadows and reflect light. Cards behave like objects so they should respect the same rules as objects.\r\n\r\nCards may contain a photo, text, and a link about a single subject. They may display content containing elements of varying size, such as photos with captions of variable length. A card collection is a layout of cards on the same plane.\r\n\r\n<nav class=\"element-navigation\">\r\n  <dl class=\"element-navigation__list\">\r\n    <dt class=\"element-navigation__title\">Table of contents</dt>\r\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\r\n    <dd class=\"element-navigation__item\">[HTML Guidelines](#html-guidelines)</dd>\r\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\r\n  </dl>\r\n</nav>\r\n\r\n# Examples\r\n## Card\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@card'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@card'}}\r\n```\r\n## Card with no shadow\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@card--card-with-no-shadow'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@card--card-with-no-shadow'}}\r\n```\r\n\r\n## Card, dark\r\n<div class=\"element-preview element-preview--dark\">\r\n  <div class=\"element-preview__inner\">{{render '@card--dark-card'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@card--dark-card'}}\r\n```\r\n\r\n## Card with medium corners\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@card--card-with-medium-corners'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@card--card-with-medium-corners'}}\r\n```\r\n\r\n\r\n## Card with small corners\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\">{{render '@card--card-with-small-corners'}}</div>\r\n</div>\r\n\r\n```html\r\n{{render '@card--card-with-small-corners'}}\r\n```\r\n\r\n\r\n## HTML guidelines\r\n\r\n## UX and Design guidelines\r\n\r\n### When to use a card\r\n- Collection or gallery comprises multiple data types, such as images, movies, text.\r\n- When it requires interaction such as swipe, drag and drop, tap, etc\r\n\r\n### Cards within cards\r\nWhen using a card within a card, the shape should change as well, so that a **Big Card** contains a **Medium Card** which contains a **Small Card**\r\n\r\n### Background Image\r\nA Card can also contain a background image for visual purposes, but in this case no content is allowed, and it should only be used as decoration.\r\n",
    "data": {
        "title": "Cards",
        "url": "/docs/components/layout/card",
        "category": "component",
        "primaryKeywords": "ys-card css layout box-shadow",
        "secondaryKeywords": "stack"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\nUse the Curved Horizon as a breaker or to introduce the next block of content. It consists of a circle inside a mask.\r\n\r\n<nav class=\"element-navigation\">\r\n  <dl class=\"element-navigation__list\">\r\n    <dt class=\"element-navigation__title\">Table of contents</dt>\r\n    <dd class=\"element-navigation__item\">[Examples](#examples)</dd>\r\n    <dd class=\"element-navigation__item\">[HTML Guidelines](#html-guidelines)</dd>\r\n    <dd class=\"element-navigation__item\">[UX and Design Guidelines](#ux-and-design-guidelines)</dd>\r\n  </dl>\r\n</nav>\r\n\r\n# Examples\r\n## Bow\r\nAs the bow is only available in 100% of the viewport width, it is not possible to preview it \"inline\" — please see a [full screen preview](/components/preview/bow)\r\n\r\n```html\r\n{{render '@bow'}}\r\n```\r\n\r\n## Bow, midnight green\r\nAs the bow is only available in 100% of the viewport width, it is not possible to preview it \"inline\" — please see a [full screen preview](/components/preview/bow--midnight-green)\r\n\r\n```html\r\n{{render '@bow--midnight-green'}}\r\n```\r\n\r\n## HTML guidelines\r\n\r\n## UX and Design guidelines\r\n\r\n### When and how to use the bow\r\n- In the TOP Tile / Hero Image (to add a clear separation of content)\r\n- In the Footer (to state the end of the page)\r\n- The Bow should always be as wide as the entire viewport and never be used inside smaller components\r\n\r\nDon't over use it. No page should contain more than 3 bows.\r\n",
    "data": {
        "title": "Bow",
        "url": "/docs/components/layout/bow",
        "category": "component",
        "primaryKeywords": "ys-bow css layout curved horizon",
        "secondaryKeywords": "block content seperator"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\nBase contains the required minimum styles needed to include any of the components.\r\n\r\n## Box sizing and font family\r\nAll elements require `box-sizing` to be set to `border-box` and they all use the LTF Etica font.\r\n\r\n### CSS\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\" hidden>\r\n    html:not(#ys-specificity) [class*='ys-'],\r\n    html:not(#ys-specificity) [class*='ys-']::before,\r\n    html:not(#ys-specificity) [class*='ys-']::after {\r\n      box-sizing: border-box;\r\n      font-family: 'Etica', arial, helvetica, sans-serif;\r\n    }\r\n  </div>\r\n</div>\r\n\r\n```css\r\nhtml:not(#ys-specificity) [class*='ys-'],\r\nhtml:not(#ys-specificity) [class*='ys-']::before,\r\nhtml:not(#ys-specificity) [class*='ys-']::after {\r\n  box-sizing: border-box;\r\n  font-family: 'Etica', arial, helvetica, sans-serif;\r\n}\r\n```\r\n",
    "data": {
        "title": "Base",
        "url": "/docs/components/foundation/base",
        "category": "component",
        "primaryKeywords": "css foundation box-sizing border-box etica",
        "secondaryKeywords": "required minimum styles"
    },
    "isEmpty": false,
    "excerpt": ""
},{
    "content": "\r\nThe YouSee brand font is LTF Etica and it's loaded using the `@font-face` strategy. It comes in four different weights:\r\n- light (200)\r\n- regular (400)\r\n- semibold (600)\r\n- bold (700)\r\n\r\n### CSS\r\n<div class=\"element-preview\">\r\n  <div class=\"element-preview__inner\" hidden>\r\n    @font-face {\r\n  font-family: 'Etica';\r\n  src: url('//s.c.dk/fonts/lft_etica_light-webfont.woff2') format('woff2'), url('//s.c.dk/fonts/lft_etica_light-webfont.woff') format('woff');\r\n  font-weight: 200;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Etica';\r\n  src: url('//s.c.dk/fonts/lft_etica_reg-webfont.woff2') format('woff2'), url('//s.c.dk/fonts/lft_etica_reg-webfont.woff') format('woff');\r\n  font-weight: 400;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Etica';\r\n  src: url('//s.c.dk/fonts/lft_etica_semibold-webfont.woff2') format('woff2'), url('//s.c.dk/fonts/lft_etica_semibold-webfont.woff') format('woff');\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Etica';\r\n  src: url('//s.c.dk/fonts/lft_etica_bold-webfont.woff2') format('woff2'), url('//s.c.dk/fonts/lft_etica_bold-webfont.woff') format('woff');\r\n  font-weight: 700;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n  </div>\r\n</div>\r\n\r\n```\r\n@font-face {\r\n  font-family: 'Etica';\r\n  src: url('//s.c.dk/fonts/lft_etica_light-webfont.woff2') format('woff2'), url('//s.c.dk/fonts/lft_etica_light-webfont.woff') format('woff');\r\n  font-weight: 200;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Etica';\r\n  src: url('//s.c.dk/fonts/lft_etica_reg-webfont.woff2') format('woff2'), url('//s.c.dk/fonts/lft_etica_reg-webfont.woff') format('woff');\r\n  font-weight: 400;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Etica';\r\n  src: url('//s.c.dk/fonts/lft_etica_semibold-webfont.woff2') format('woff2'), url('//s.c.dk/fonts/lft_etica_semibold-webfont.woff') format('woff');\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Etica';\r\n  src: url('//s.c.dk/fonts/lft_etica_bold-webfont.woff2') format('woff2'), url('//s.c.dk/fonts/lft_etica_bold-webfont.woff') format('woff');\r\n  font-weight: 700;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n```\r\n",
    "data": {
        "title": "Web fonts",
        "url": "/docs/components/foundation/webfonts",
        "category": "component",
        "primaryKeywords": "css foundation LTF Etica 100 200 400 700 800 900",
        "secondaryKeywords": "font-face font-weight font-display font-family"
    },
    "isEmpty": false,
    "excerpt": ""
}
]